DOUBLE ARRAY STACK ZADACA KAKO BI IZGLEDALA


import java.util.*;

class DoubleArrayStack<E> {

    private E[] elems;
    private int top1;
    private int top2;

    @SuppressWarnings("unchecked")
    public DoubleArrayStack(int maxDepth) {
        elems = (E[]) new Object[maxDepth];
        top1 = -1;
        top2 = maxDepth;
    }

    public boolean isFull() {
        return (top1 + 1 == top2);
    }

    public boolean isEmptyFirst() {
        return top1 == -1;
    }

    public boolean isEmptySecond() {
        return top2 == elems.length;
    }

    public void clearFirst() {
        while (!isEmptyFirst()) {
            elems[top1--] = null;
        }
    }

    public void clearSecond() {
        while (!isEmptySecond()) {
            elems[top2++] = null;
        }
    }

    public E peekFirst() {
        if (isEmptyFirst())
            return null;
        return elems[top1];
    }

    public E peekSecond() {
        if (isEmptySecond())
            return null;
        return elems[top2];
    }

    public void pushFirst(E x) {
        if (isFull()) {
            throw new RuntimeException("Stack Overflow");
        }
        elems[++top1] = x;
    }

    public void pushSecond(E x) {
        if (isFull()) {
            throw new RuntimeException("Stack Overflow");
        }
        elems[--top2] = x;
    }

    public E popFirst() {
        if (isEmptyFirst())
            return null;
        E topmost = elems[top1];
        elems[top1--] = null;
        return topmost;
    }

    public E popSecond() {
        if (isEmptySecond())
            return null;
        E topmost = elems[top2];
        elems[top2++] = null;
        return topmost;
    }

    @Override
    public String toString() {
        return Arrays.toString(elems);
    }
}
public class Main {
    public static void main(String[] args) {
        DoubleArrayStack<Integer> stack = new DoubleArrayStack<>(10);

        // Push to both stacks
        stack.pushFirst(1);
        stack.pushFirst(2);
        stack.pushFirst(3);

        stack.pushSecond(99);
        stack.pushSecond(98);
        stack.pushSecond(97);

        // Show full array state
        System.out.println("Stack contents: " + stack);

        // Peek
        System.out.println("Top of First Stack: " + stack.peekFirst());  // 3
        System.out.println("Top of Second Stack: " + stack.peekSecond()); // 97

        // Pop
        System.out.println("Pop from First Stack: " + stack.popFirst()); // 3
        System.out.println("Pop from Second Stack: " + stack.popSecond()); // 97

        // Show state after pop
        System.out.println("After pop - Stack contents: " + stack);

        // Clear both
        stack.clearFirst();
        stack.clearSecond();
        System.out.println("After clear - Stack contents: " + stack);
    }
}



Задача 1.
• Да се провери коректноста на заградите во еден израз.
• Еден израз има коректни загради ако:
– За секоја лева заграда, подоцна следува соодветна десна заграда
– За секоја десна заграда претходно постои лева заграда
– Секој под-израз меѓу пар од две загради содржи коректен број на
загради
• Примери на изрази со коректни и некоректни загради:
s  (s – a)  (s – b)  (s – c)
(– b + [b
2 – 4ac]) / 2a
s  (s – a)  (s – b  (s – c)
s  (s – a)  s – b)  (s – c)
(– b + [b
2 – 4ac)] / 2


import java.util.*;

interface Stack<E> {
    public boolean isEmpty();
    public E peek();
    public void clear();
    public void push(E x);
    public E pop();
}

class ArrayStack<E> implements Stack<E> {
    private E[] elems;
    private int depth;

    @SuppressWarnings("unchecked")
    public ArrayStack(int maxDepth) {
        elems = (E[]) new Object[maxDepth];
        depth = 0;
    }

    public boolean isEmpty() {
        return (depth == 0);
    }

    public E peek() {
        if (depth == 0)
            throw new NoSuchElementException();
        return elems[depth - 1];
    }

    public void clear() {
        for (int i = 0; i < depth; i++) elems[i] = null;
        depth = 0;
    }

    public void push(E x) {
        elems[depth++] = x;
    }

    public int size() {
        return depth;
    }

    public E pop() {
        if (depth == 0)
            throw new NoSuchElementException();
        E topmost = elems[--depth];
        elems[depth] = null;
        return topmost;
    }
}

public class Main {

    public static boolean matching(char left, char right) {
        return (left == '(' && right == ')') ||
                (left == '[' && right == ']') ||
                (left == '{' && right == '}');
    }

    public static boolean isCorrect(String expression) {
        ArrayStack<Character> brackets = new ArrayStack<>(expression.length());

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            if (ch == '(' || ch == '{' || ch == '[') {
                brackets.push(ch);
            } else if (ch == ')' || ch == '}' || ch == ']') {
                if (brackets.isEmpty()) {
                    return false;
                }
                char leftBracket = brackets.pop();
                if (!matching(leftBracket, ch)) {
                    return false;
                }
            }
        }

        return brackets.isEmpty();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String expression = scanner.nextLine();
        System.out.println(isCorrect(expression));
    }
}



Задача 2.
• ЗА ДОМА. Да се напише алгоритам кој ќе врши евалуација
на израз во постфикс нотација.
• Пр. 5 9 + 2 * 6 5 * + изразот е во постфикс нотација 





import java.util.*;

interface Stack<E> {
    public boolean isEmpty();
    public E peek();
    public void clear();
    public void push(E x);
    public E pop();
}

class ArrayStack<E> implements Stack<E> {
    private E[] elems;
    private int depth;

    @SuppressWarnings("unchecked")
    public ArrayStack(int maxDepth) {
        elems = (E[]) new Object[maxDepth];
        depth = 0;
    }

    public boolean isEmpty() {
        return (depth == 0);
    }

    public E peek() {
        if (depth == 0)
            throw new NoSuchElementException();
        return elems[depth - 1];
    }

    public void clear() {
        for (int i = 0; i < depth; i++) elems[i] = null;
        depth = 0;
    }

    public void push(E x) {
        elems[depth++] = x;
    }

    public int size() {
        return depth;
    }

    public E pop() {
        if (depth == 0)
            throw new NoSuchElementException();
        E topmost = elems[--depth];
        elems[depth] = null;
        return topmost;
    }
}

public class Main {

    public static int resultPostfix(char[] a){
        ArrayStack<Integer>stack=new ArrayStack<>(100);
        int number=0;
        for(int i=0;i<a.length;i++){
            if(Character.isDigit(a[i]) && Character.isDigit(a[i+1])){
            number=number*10+Character.getNumericValue(a[i]);
            }
            if(Character.isDigit(a[i]) && !Character.isDigit(a[i+1])){
                number=number*10+Character.getNumericValue(a[i]);
                stack.push(number);
                number=0;
            }

            if(a[i]=='+' || a[i]=='-' || a[i]=='*' || a[i]=='/'){
                int num1=stack.pop();
                int num2=stack.pop();

                if(a[i]=='+'){
                    stack.push(num1+num2);
                }
                else if(a[i]=='-'){
                    stack.push(num1-num2);
                }
                else if(a[i]=='*'){
                    stack.push(num1*num2);
                }
                else if(a[i]=='/'){
                    stack.push(num1/num2);
                }
            }
        }
        return stack.pop();
    }




    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s1= sc.nextLine();
        char[] c= s1.toCharArray();
        int result =Main.resultPostfix(c);
        System.out.println(result);
    }
}



Задача 3.
• Студентската служба на факултет работи со студенти од
09:00 до 12:00. Ако знаеме за секој студент од редицата
колку време е потребно за студентската служба да го
опслужи, да се одреди кој студент ќе биде првиот студент
кој нема да биде опслужен и колку студенти што чекале во
редицата за тој ден не се опслужени.



import java.util.*;

class ArrayQueue<E> {
    // Redicata e pretstavena na sledniot nacin:
    // length go sodrzi brojot na elementi.
    // Ako length > 0, togash elementite na redicata se zachuvani vo elems[front...rear-1]
    // Ako rear > front, togash vo  elems[front...maxlength-1] i elems[0...rear-1]
    E[] elems;
    int length, front, rear;

    // Konstruktor ...

    @SuppressWarnings("unchecked")
    public ArrayQueue(int maxlength) {
        elems = (E[]) new Object[maxlength];
        clear();
    }

    public boolean isEmpty() {
        // Vrakja true ako i samo ako redicata e prazena.
        return (length == 0);
    }

    public int size() {
        // Ja vrakja dolzinata na redicata.
        return length;
    }

    public E peek() {
        // Go vrakja elementot na vrvot t.e. pocetokot od redicata.
        if (length > 0)
            return elems[front];
        else
            throw new NoSuchElementException();
    }

    public void clear() {
        // Ja prazni redicata.
        length = 0;
        front = rear = 0;  // arbitrary
    }

    public void enqueue(E x) {
        // Go dodava x na kraj od redicata.
        if (length == elems.length)
            throw new NoSuchElementException();
        elems[rear++] = x;
        if (rear == elems.length) rear = 0;
        length++;
    }

    public E dequeue() {
        // Go otstranuva i vrakja pochetniot element na redicata.
        if (length > 0) {
            E frontmost = elems[front];
            elems[front++] = null;
            if (front == elems.length) front = 0;
            length--;
            return frontmost;
        } else
            throw new NoSuchElementException();
    }
}

//Студентската служба на факултет работи со студенти од
//09:00 до 12:00. Ако знаеме за секој студент од редицата
//колку време е потребно за студентската служба да го
//опслужи, да се одреди кој студент ќе биде првиот студент
//кој нема да биде опслужен и колку студенти што чекале во
//редицата за тој ден не се опслужени.

class Student{
    String index;
    int minutes;

    Student(String index, int minutes){
        this.index = index;
        this.minutes = minutes;
    }
}

public class Main {

    static Student firstUnservedStuden(Queue<Student> q) {
        int availableTime=180;
        while(!q.isEmpty()){
            Student s = q.peek();
            if(s.minutes > availableTime){
                return s;
            }
            availableTime-=s.minutes;
        q.poll();
        }
        return null;
    };

    public static void main(String[] args){
            Scanner sc = new Scanner(System.in);
            int n=sc.nextInt();
            sc.nextLine();
            Queue<Student>queue=new LinkedList<>();
            for(int i=0;i<n;i++){
                String index=sc.nextLine();

                int minutes=sc.nextInt();
                sc.nextLine();
                queue.add(new Student(index,minutes));
            }

            Student unserved=firstUnservedStuden(queue);

            if(unserved==null){
                System.out.println("all students served lil bro");
            }
            else{
                System.out.println(unserved.index);
                System.out.println(queue.size());
            }
    }
}



 Infix to Postfix
Користеj´ки jа податочната структура магацин (стек), променете го изразот од
infix во postfix нотациjа.
Infix нотациjа: операторот се нао´га поме´гу операндите ( 5 + 9 ) * 2 + 6 * 5 .
Postfix нотациjа: операторите се запишуваат после операндите 5 9 + 2 * 6 5 *
+.
Влез: Во влезот е даден изразот во infix нотациjа.
Излез: На излез треба да се испечати изразот во postfix нотациjа.
Забелешка: При реализациjа на задачата дозволено e да се користи само
еден стек. Не е дозволено да се користат дополнителни структури како низи и
листи.
Пример:
Влез: 𝑎 + 𝑏 * (𝑐
∧𝑑 − 𝑒)
∧
(𝑓 + 𝑔 * ℎ) − 𝑖
Излез: 𝑎𝑏𝑐𝑑∧
𝑒 − 𝑓𝑔ℎ * +∧ * +𝑖−
Решение
Во дадената задача треба да се промени даден израз од infix во postfix нотациjа.
Во постфикс нотациjата, операторите следат по операндите. Мора да се користи
стек за да се организира обработката на операторите и да се изгради постфиксниот израз. Со користење на стек, можеме да напишеме ефикасен алгоритам
за преведување на инфиксниот израз во постфиксна нотациjа, што овозможува
подоцна лесно извршување на изразот без потреба од анализа на инфиксната
структура.
99
Податочни структури
Имплементациjата на решението е дадена подолу. Во оваа имплементациjа
методот infixToPostfix вра´ка резултат во постфиксна нотациjа. Операторите во
инфиксната нотациjа имаат различни приоритети (на пример, * и / имаат поголем приоритет од + и -). Стекот овозможува ефикасно следење на приоритетите
на операторите и правилното редоследување на операторите во постфиксната
нотациjа. Кога се сретне оператор во инфиксниот израз, ако има оператори на
врвот на стекот со поголем или ист приоритет, тие се преместуваат на постфиксниот израз пред таа нова операциjа. Исто така, стекот се користи за да се следат
заградите ( и ) во изразот и да се осигура дека операторите ме´гу заградите се
обработуваат соодветно. Резултатот од примерен израз во постфикс нотациjа со
повикување на infixToPostfix методот се печати на излез во главниот main метод



public class Main {
    // Check if a character is an operator
    private static boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
    }

    // Get precedence of an operator
    private static int getPrecedence(char op) {
        switch (op) {
            case '^': return 3;
            case '*':
            case '/': return 2;
            case '+':
            case '-': return 1;
            default: return 0;
        }
    }

    // Convert infix to postfix
    public static String infixToPostfix(String infix) {
        ArrayStack<Character> stack = new ArrayStack<>(100);
        StringBuilder postfix = new StringBuilder();

        for (int i = 0; i < infix.length(); i++) {
            char c = infix.charAt(i);

            // Skip whitespace
            if (c == ' ') continue;

            // Operand: add to postfix
            if (Character.isLetterOrDigit(c)) {
                postfix.append(c);
            }
            // Left parenthesis: push to stack
            else if (c == '(') {
                stack.push(c);
            }
            // Right parenthesis: pop until '('
            else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop(); // Remove '(' from stack
            }
            // Operator: handle precedence
            else if (isOperator(c)) {
                while (!stack.isEmpty() && getPrecedence(stack.peek()) >= getPrecedence(c)) {
                    postfix.append(stack.pop());
                }
                stack.push(c);
            }
        }

        // Pop remaining operators
        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    public static void main(String[] args) {
        String infix = "a + b * (c ^ d - e) ^ (f + g * h) - i";
        String postfix = infixToPostfix(infix);
        System.out.println("Postfix: " + postfix); // Output: abcd^e-fgh*+^*+i-
    }
}

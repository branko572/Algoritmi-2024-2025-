Дадени се Н цифри. Да се напише алгоритам кој ќе го даде најголемиот можен број составен од тие цифри.

Влез: Првиот број од влезот е бројот на цифри N, а потоа во следниот ред се цифрите.


Излез: Најголемиот број кој може да се состави од тие цифри

/

We are given N digits. Write an algorithm that composes the largest possible number from those digits.

Input: The first number in the input is the number of digits N, then in the next line are the given digits.

Output: The maximum possible number containing those digits

For example:

Input	
5
1 2 3 4 5  

Result 
54321

Input
7
9 7 3 7 9 3 1

Result 
9977331



import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        Integer[] digits = new Integer[n];

        for (int i = 0; i < n; i++) {
            digits[i] = sc.nextInt();
        }

        // Sort digits in descending order
        Arrays.sort(digits, Comparator.reverseOrder());

        // Build and print the largest number
        for (int digit : digits) {
            System.out.print(digit);
        }
    }
}

----------------------------------------------------------------------------------




import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int array[] = new int[N];

        // Reading input values into the array
        for(int i = 0; i < N; i++) {
            array[i] = sc.nextInt();
        }

        // Displaying original array

       

        // Bubble sort in descending order
        for(int i = 0; i < N - 1; i++) {
            for(int j = 0; j < N - 1 - i; j++) {
                if(array[j] < array[j + 1]) {  // Corrected comparison for descending order
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }

        // Displaying sorted array

        for(int i = 0; i < N; i++) {
            System.out.print(array[i]);
        }
    }
}


2.

Дадени се N состаноци со време на почеток и крај. Да се најде минималниот број на сали за состаноци потребен за да се одржат сите состаноци.


Влез: Првиот број од влезот е бројот на состаноци N, а потоа во следниот ред минутата на почнување и минутата на завршување на состанокот.



Излез: Најмалиот потребен број на соби за состаноци за да можат да се одржат сите состаноци

/

We are given N scheduled meetings. Write an algorithm that finds the minimum number of meeting rooms needed to schedule those meetings.

Input: The first number in the input is the number of meetings N, then in the next N lines are the start and end time for each of the meetings.

Output: The minimum number of needed meeting rooms to schedule the meetings.

For example:

Input
5
1 2
1 2
5 10
11 14
15 20  

Result 
2    

Input 
5
1 2
2 3
3 4
4 5
5 6  

Result
2


import java.util.Scanner;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();

        int[] starts = new int[N];
        int[] ends = new int[N];

        for (int i = 0; i < N; i++) {
            starts[i] = sc.nextInt();
            ends[i] = sc.nextInt();
        }

        Arrays.sort(starts);
        Arrays.sort(ends);

        int start = 0;
        int end = 0;
        int num = 0;

        while (start < N) {
            if (starts[start] <= ends[end]) {
                num++;
                start++;
            } else {
                end++;
                start++;
            }
        }

        System.out.println(num);


    }
}





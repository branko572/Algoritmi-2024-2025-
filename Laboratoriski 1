1.

За дадена низа од N цели броеви, да се избришат елементите со вредност помала од просекот на сите елементи во низата. На пример за низата 1, 2, 3, 4, 5 просекот е (1 + 2 + 3 + 4 + 5) / 5 = 15 / 5 = 3, што значи треба да се избришат елементите 1 и 2, што значи низата после оваа трансформација ќе биде 3, 4, 5.

Влез: Првиот број од влезот е бројот на елементи во низата N, а потоа во следниот ред се дадени самите елементи одделени со празно место.

Излез: Низата пред и после направената трансформација.

/

For a given array with N integers, all the elements that are lower than the average of the whole array need to be deleted. For example for the array 1, 2, 3, 4, 5 the average is (1 + 2 + 3 + 4 + 5) / 5 = 15 / 5 = 3 which means that the elements 1 and 2 should be deleted, so the array after the transformation will be 3, 4, 5.

Input: The first number in the input is the number of integers in the array N, then in the next line the elements are given, separated by spaces.

Output: The array before and after the transformation.

For example:

Input
5
1 2 3 4 5

Result
{1,2,3,4,5}
{3,4,5}


import java.util.Scanner;

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }
}

class SLL<E> {
    private SLLNode<E> first;

    public SLL() {
        // Construct an empty SLL
        this.first = null;
    }

    public void deleteList() {
        first = null;
    }

    public int size() {
        int listSize = 0;
        SLLNode<E> tmp = first;
        while (tmp != null) {
            listSize++;
            tmp = tmp.succ;
        }
        return listSize;
    }

    @Override
    public String toString() {
        String ret = "";
        if (first != null) {
            ret = "{";
            SLLNode<E> tmp = first;
            ret += tmp.element;
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret += "," + tmp.element;
            }
            ret += "}";
        } else {
            ret = "Prazna lista!!!";
        }
        return ret;
    }

    public void insertFirst(E o) {
        SLLNode<E> ins = new SLLNode<>(o, null);
        ins.succ = first;
        first = ins;
    }

    public void insertLast(E o) {
        if (first != null) {
            SLLNode<E> tmp = first;
            while (tmp.succ != null)
                tmp = tmp.succ;
            tmp.succ = new SLLNode<>(o, null);
        } else {
            insertFirst(o);
        }
    }

    public SLLNode<E> getFirst() {
        return first;
    }
}

public class Main {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        SLL<Integer> list = new SLL<>();

        int N = sc.nextInt();
        int sum = 0;
        int average;

        // Read and insert elements into the list
        for (int i = 0; i < N; i++) {
            int number = sc.nextInt();
            list.insertLast(number);
            sum += number;
        }

        // Calculate average
        average = sum / N;

        // Create a modified list with elements >= average
        SLL<Integer> modlist = new SLL<>();
        SLLNode<Integer> current = list.getFirst();
        while (current != null) {
            if (current.element >= average) {
                modlist.insertLast(current.element);
            }
            current = current.succ;
        }

        // Print results
        System.out.println(list);

        System.out.println(modlist);
    }
}

-------------------------------------------------------------------------------------


import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;

public class LabVezba1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Read the number of elements
        int N = sc.nextInt();
        List<Integer> numbers = new ArrayList<>(N);
        int sum = 0;
        
        // Read elements and calculate sum
        for (int i = 0; i < N; i++) {
            int number = sc.nextInt();
            sum += number;
            numbers.add(number);
        }

        // Print original list
        System.out.print("{");
        for (int i = 0; i < numbers.size(); i++) {
            System.out.print(numbers.get(i));
            if (i < numbers.size() - 1) {
                System.out.print(",");
            }
        }
        System.out.println("}");

        // Calculate average
        double average = (double) sum / N;

        // Create a new list to store elements greater than or equal to the average
        List<Integer> filteredNumbers = new ArrayList<>();
        for (int number : numbers) {
            if (number >= average) {
                filteredNumbers.add(number);
            }
        }

        // Print filtered list
        System.out.print("{");
        for (int i = 0; i < filteredNumbers.size(); i++) {
            System.out.print(filteredNumbers.get(i));
            if (i < filteredNumbers.size() - 1) {
                System.out.print(",");
            }
        }
        System.out.println("}");  // Closing the filtered list
    }
}


Дадена е еднострана поврзана листа чии што јазли содржат по еден String. Дополнително, даден е и уште еден природен број L. Во дадената листа после секој јазол којшто содржи String со должина L да се вметне нов јазол со вредност "Target".

Влез: Во првиот ред од влезот е даден бројот на елементи во листата - N, па во следните N редови се дадени самите елементи (String-ови) од листата. На крај, во последниот ред е даден бројот L. 

Излез: На излез треба да се испечати листата пред и после промената.

/

You are given a single linked list with String nodes. Additionally, you are given one more integer L. You need to insert a new node with value "Target" after each node that contains a String with exactly L characters in the list.

Input: In the first line from the input the number of elements in the list is given - N, and then in the next N lines the elements themselves. In the last line, the integer L is given.

Output: The list before and after the transformation


For example:

Input	
3
Sky
Blue
Cloud
5

Result
Sky->Blue->Cloud
Sky->Blue->Cloud->Target


import java.util.Scanner;

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }
}

class SLL<E> {
    private SLLNode<E> first;

    public SLL() {
        // Construct an empty SLL
        this.first = null;
    }

    public void deleteList() {
        first = null;
    }

    public int size() {
        int listSize = 0;
        SLLNode<E> tmp = first;
        while (tmp != null) {
            listSize++;
            tmp = tmp.succ;
        }
        return listSize;
    }

    @Override
    public String toString() {
        StringBuilder ret = new StringBuilder();
        if (first != null) {
            SLLNode<E> tmp = first;
            ret.append(tmp.element);
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret.append("->").append(tmp.element);
            }
        } else {
            ret = new StringBuilder("Prazna lista!!!");
        }
        return ret.toString();
    }

    public void insertFirst(E o) {
        SLLNode<E> ins = new SLLNode<>(o, null);
        ins.succ = first;
        first = ins;
    }

    public void insertLast(E o) {
        if (first != null) {
            SLLNode<E> tmp = first;
            while (tmp.succ != null)
                tmp = tmp.succ;
            tmp.succ = new SLLNode<>(o, null);
        } else {
            insertFirst(o);
        }
    }

    public SLLNode<E> getFirst() {
        return first;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        SLL<String> list = new SLL<>();

        // Read the number of elements to insert
        int N = sc.nextInt();
        sc.nextLine(); // Consume the newline character
        for (int i = 0; i < N; i++) {
            String element = sc.nextLine();
            list.insertLast(element);
        }

        int L = sc.nextInt(); // The target length for string elements

        // Print the list before modification
        System.out.println(list);

        // Modify the list by inserting "Target" nodes
        SLLNode<String> current = list.getFirst();
        while (current != null) {
            if (current.element.length() == L) {
                // Create the "Target" node
                SLLNode<String> targetNode = new SLLNode<>("Target", current.succ);
                current.succ = targetNode; // Insert "Target" after the current node
                current = targetNode.succ;  // Move current to the node after "Target"
            } else {
                current = current.succ; // Move to the next node
            }
        }

        // Print the list after modification
        System.out.println(list);


    }
}






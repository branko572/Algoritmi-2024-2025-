Задача 1

• Дадени се N точки (N >= 2) во
дводимензионален простор. Пресметајте кое
е најмалото растојание помеѓу две точки

import java.util.Scanner;
import java.util.ArrayList;

class Point {
    int x;
    int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public double distanceTo(Point p) {
        return Math.sqrt((this.x - p.x) * (this.x - p.x) + (this.y - p.y) * (this.y - p.y));
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        double minDist = Double.MAX_VALUE;

        ArrayList<Point> points = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            points.add(new Point(x, y));
        }


        for(int i=0;i< points.size();i++){
            for(int j=i+1;j< points.size();j++){

                double dist = points.get(i).distanceTo(points.get(j));
                if (dist < minDist) {
                    minDist = dist;
                }

            }
        }




        System.out.println("Minimum distance: " + minDist);
        sc.close();
    }
}




----------------------------------------------------------------------------------------------------------------

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
    static final double INF = 10000.0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        System.out.print("Enter the number of points (N >= 2): ");
        int N = Integer.parseInt(br.readLine());
        Point[] tocki = new Point[N];

        for (int i = 0; i < N; i++) {
            System.out.print("Enter x and y for point " + (i + 1) + ": ");
            String[] pom = br.readLine().split(" ");
            int x = Integer.parseInt(pom[0]);
            int y = Integer.parseInt(pom[1]);
            tocki[i] = new Point(x, y);
        }

        System.out.println("The smallest distance between two points is: " + najmalorastojanie(tocki, N));
    }

    public static double najmalorastojanie(Point[] tocki, int n) {
        double best = INF;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                double r = tocki[i].rastojanie(tocki[j]);
                best = Math.min(r, best);
            }
        }
        return best;
    }
}

class Point {
    int x;
    int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public double rastojanie(Point p) {
        return Math.sqrt((this.x - p.x) * (this.x - p.x) + (this.y - p.y) * (this.y - p.y));
    }
}


----------------------------------------------------------------------------------------------------------------


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

class Point {
    double x;
    double y;

    Point(double x, double y) {
        this.x = x;
        this.y = y;
    }
}

class BruteForce {
    static final double INF = 1000000.0;

    double rastojanie(Point a, Point b) {
        return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
    }

    double najmalo_rastojanie(Point[] p, int n) {
        double best = INF;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                best = Math.min(best, rastojanie(p[i], p[j]));
            }
        }
        return best;
    }
}

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BruteForce bf = new BruteForce();

        System.out.print("Enter the number of points (N >= 2): ");
        int N = Integer.parseInt(br.readLine());
        Point[] points = new Point[N];

        for (int i = 0; i < N; i++) {
            System.out.print("Enter x and y for point " + (i + 1) + ": ");
            String[] coords = br.readLine().split(" ");
            double x = Double.parseDouble(coords[0]);
            double y = Double.parseDouble(coords[1]);
            points[i] = new Point(x, y);
        }

        double closestDistance = bf.najmalo_rastojanie(points, N);
        System.out.println("The smallest distance between two points is: " + closestDistance);
    }
}


Задача 2

• Дадена е шаховска табла. Пресметајте на
колку различни начини можат да се постават
две “кралици” без да се напаѓаат една со
друга. Две “кралици” се напаѓаат ако се
наоѓаат во ист ред, колона или дијагонала.


 class BruteForceChess {

    int dali_se_napagaat(int i1, int j1, int i2, int j2) {
        if (i1 == i2) // ista redica
        {
            return 1;
        }
        if (j1 == j2) // ista kolona
        {
            return 1;
        }
        if (Math.abs(i1 - i2) == Math.abs(j1 - j2)) // ista dijagonala
        {
            return 1;
        }
        return 0;
    }

    int broj_na_nacini() {
        int i1, j1, i2, j2;
        int rezultat = 0;

        for (i1 = 0; i1 < 8; i1++) {
            for (j1 = 0; j1 < 8; j1++) {
                for (i2 = 0; i2 < 8; i2++) {
                    for (j2 = 0; j2 < 8; j2++) {
                        if (dali_se_napagaat(i1, j1, i2, j2) == 0) {
                            rezultat++;
                        }
                    }
                }
            }
        }

        return rezultat;
    }



    // printf("%d\n", min_broj_moneti(79));
    public static void main(String[] args) {

        BruteForceChess bf = new BruteForceChess();

        System.out.println("Broj na nacini na rasporeduvanje na kralici: " + bf.broj_na_nacini());
    }

}

----------------------------------------------------------------------------------------------------------------


import java.util.Scanner;
import java.util.ArrayList;

class Chessboard {

    public int dalisenapagjaat(int x, int y, int x2, int y2) {

        if(x==x2){
            return 1;
        }
        if(y==y2){
            return 1;
        }

        if(Math.abs(x-x2)==Math.abs(y-y2)){
            return 1;
        }
        return 0;

    }


    int brojnanacini() {
            int broj = 0;
        for(int x=0; x<8; x++){
            for(int y=0; y<8; y++){
                for(int x2=0; x2<8; x2++){
                    for(int y2=0; y2<8; y2++){
                        if(dalisenapagjaat(x,y,x2,y2)==0){
                            broj++;
                        }
                    }
                }
            }
        }
        return broj;
    }


}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
            Chessboard cb = new Chessboard();

            System.out.println(cb.brojnanacini());
    }
}


Задача 3

• Дадени се парички со одредена вредност
(постојат парички од 50, 10, 5, 2 и 1 денар), и
притоа бројот на парички од секоја вредност е
неограничен. За дадена сума да се определи
најмалиот број на парички кои се потребни да
се формира таа сума.


import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int sum = sc.nextInt();  // Input the sum we want to form
        int[] moneti = {50, 10, 5, 2, 1};  // Coin denominations in descending order

        int coincount = 0;  // Variable to store the total number of coins

        // Loop through each coin denomination, starting with the largest
        for (int i = 0; i < moneti.length; i++) {
            coincount += sum / moneti[i];  // Add number of coins of this denomination
            sum %= moneti[i];  // Reduce the sum by the number of coins used
        }

        System.out.println(coincount);  // Output the total number of coins
    }
}



Задача 4
• Студент се спрема да оди на патување.
Дозволено му е да носи еден куфер со
максимална тежина од 20 кг. Студентот се
двоуми помеѓу облека, книги и друштвени
игри. Откако ги измерил и оценил овие работи,
студентот ја добил следната табела:
 
# Објект Вредност Тежина
1 Облека 200 10
2 Книги 150 20
3 Монопол, карти… 5 0.5
4 CD player, MP3 player… 80 5                                                                                                                Што да понесе студентот, така што вредноста
на понесените работи да биде максимална?

• Постојат две верзии на овој проблем:

– Fractional knapsack проблем: Студентот може да
земе делови од објекти односно може да се одлучи
да понесе само еден дел x i од објектот оi
, каде 0 ≤ x  i≤ 1.

– 0-1 knapsack проблем: проблемот е исто поставен,
но објектите не можат да се поделат на помали
делови, така што студентот ќе мора да се одлучи
дали ќе го земе објектот или не. Значи не може да
земе само дел од објектот (x i =0 или x i =1)     

(fractional knapsack) –анализа
• За да се реши Fractional knapsack (предметите
може да се земаат по делови) проблемот може
да го користиме архетипот "Алчен алгоритам".
• На пример, нека е даден следниот проблем:
бројот на објекти е 3 (n=3), капацитетот на
ранецот е C=20, вредноста за секој од
објектите е дадена со (p1, p2, p3) = (25, 24, 15) и
тежините на објектите изнесуваат (t1, t2, t3) =
(18, 15, 10). Да се пополни ранецот со објекти
за да се добие максимален профит. 

(fractional knapsack) –анализа
• Доколку можеме да земеме дел од дадените
предмети без ограничувања, оптималното
решение ќе се добие со пресметување на
релативната вредност на предметот во однос
на неговата тежина
• Алчен избор: прво земи ги предметите што
вредат најмногу а тежат најмалку

Се пресметува односот p/t, вредност според
тежина
• Се подредуваат преметите според
пресметаниот сооднос
• Ранецот прво се пополнува со предметите кои
имаат најголема релативна вредност во однос
на тежина


import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Define the profits and weights of the items
        int[] p = new int[]{25, 24, 15};  // Profits
        int[] t = new int[]{18, 15, 10};  // Weights

        // Create an array to store the fractions of items taken
        float[] x = new float[3];

        // Call the profit function and print the result
        Main knapsack = new Main();
        System.out.println("Maximum profit: " + knapsack.profit(p, t, 3, 20, x));

        // Print the solution vector (fractions of items taken)
        System.out.print("Solution vector: ");
        for (float fraction : x) {
            System.out.print(fraction + " ");
        }
    }

    // Sorting function to sort items by value/weight ratio in descending order
    void sort(int[] p, int[] t, int n) {
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                float p1 = (float) p[i] / t[i];
                float p2 = (float) p[j] / t[j];

                if (p1 < p2) { // If item i has lower value/weight ratio than item j
                    // Swap the items
                    int tmpP = p[i];
                    int tmpT = t[i];
                    p[i] = p[j];
                    t[i] = t[j];
                    p[j] = tmpP;
                    t[j] = tmpT;
                }
            }
        }
    }

    // Function to calculate maximum profit from the fractional knapsack
    float profit(int[] p, int[] t, int n, float C, float[] x) {
        // Sort items by their value/weight ratio in descending order
        sort(p, t, n);

        float profit = 0;

        // Iterate through the sorted items
        for (int i = 0; i < n; i++) {
            if (C >= t[i]) {
                // Take the entire item if the knapsack can accommodate it
                x[i] = 1;
                C -= t[i];
                profit += p[i];  // Add the profit of the full item
            } else {
                // Take a fraction of the item if it doesn't fit entirely
                x[i] = C / (float) t[i];
                profit += x[i] * p[i];  // Add the fractional profit
                C = 0;  // The knapsack is full now
                break;  // No more items can be added
            }
        }

        return profit;
    }
}



RAZDELI I VLADEJ METODA:



public class Main {
    public static void main(String[] args) {
        int a[] = new int[]{8, 2, 4, 9, 3, 6 ,7 ,5};
        mergesort(a, 0, 7);

        for(int i = 0; i < 8; i++)
            System.out.print(a[i] + " ");
    }

    // Merge function to merge two subarrays (from l to mid and from mid+1 to r)
    static void merge(int a[], int l, int mid, int r) {
        // Create a temporary array with the size of the subarray we are merging
        int temp[] = new int[r - l + 1];

        int i = l;  // Pointer for the left subarray
        int j = mid + 1;  // Pointer for the right subarray
        int k = 0;  // Pointer for the temporary array

        // Merge the two subarrays into the temp array
        while(i <= mid && j <= r) {
            if(a[i] < a[j]) {
                temp[k] = a[i];  // If left element is smaller, add it to temp[]
                i++;
            } else {
                temp[k] = a[j];  // If right element is smaller, add it to temp[]
                j++;
            }
            k++;
        }

        // If there are remaining elements in the left subarray
        while(i <= mid) {
            temp[k] = a[i];
            i++;
            k++;
        }

        // If there are remaining elements in the right subarray
        while(j <= r) {
            temp[k] = a[j];
            j++;
            k++;
        }

        // Copy the sorted elements from temp[] back to the original array a[]
        for(int p = 0; p < r - l + 1; p++) {
            a[l + p] = temp[p];  // Copy the sorted portion of temp[] back to a[]
        }
    }

    // Recursive merge sort function
    static void mergesort(int a[], int l, int r) {
        if(l == r) return;  // Base case: if the array has only one element

        int mid = (l + r) / 2;  // Find the middle point of the array
        mergesort(a, l, mid);  // Recursively sort the left half
        mergesort(a, mid + 1, r);  // Recursively sort the right half

        merge(a, l, mid, r);  // Merge the two sorted halves
    }
}





Во оваа задача ќе работите со два објекти „Вработени“ и „Проекти“.

Еден вработен е дефиниран со 2 вредности: Име (String), Возраст (цел број).

Еден проект е дефиниран со 2 вредности: Работно Време (цел број), Плата по час (цел број).

За даден проект вкупната плата се пресметува како производ на работното време и платата по час.

Вработените ќе добиваат понудени проекти, и треба да го изберат проектот од кој ќе добијат најголема плата (доколку имаат избор од повеќе проекти со иста најголема плата, тогаш првиот таков).

Ваша задача ќе биде да им помогнете на вработените со тоа што ќе искористите CBHT со 10 кофички каде што за секој вработен ќе ја чувате неговата најдобра понуда.

За хеш функција користете производ од возраста на вработениот и ASCII вредноста на првата буква од името на вработениот.

Влез:
Во првиот ред е даден еден цел број N кој го означува бројот на понуди. Потоа во следните N редови се дадени по 4 вредности, информациите за понудите, името и возраста на вработениот и работното време и платата од час на проектот соодветно:

N
name_1 age_1 time_1 rate_1
name_2 age_2 time_2 rate_2
...
name_N age_N time_N rate_N
Излез:

Отпечатете ја целата табела (со готовиот toString метод).

Секој вработен да се печати во формат "<name, age>" каде на местото на name и age треба да стои името и возраста на вработениот соодветно (имплементирајте го ова во toString метод)

Секој проект да се печати во формат "<time, rate>" каде на местото на time и rate треба да стои работното време и платата по час на проектот соодветно (имплементирајте го ова во toString метод)




For example:

Input	Result
5  
Martin 25 3 100  
Jana 26 4 90  
Martin 25 5 120  
Jana 26 2 95  
Nenad 20 6 80 
0:<<Nenad, 20>,<6, 80>>
1:
2:
3:
4:<<Jana, 26>,<4, 90>>
5:<<Martin, 25>,<5, 120>>
6:
7:
8:
9:
1  
Toni 45 10 500  
Toni 42 30 600
Ana 20 10 300
Jana 20 15 350
0:<<Toni, 45>,<10, 500>>
1:
2:
3:
4:
5:
6:
7:
8:
9:





import java.util.Scanner;
import java.util.Objects; // Import Objects for null-safe comparison

// Овде креирајте ги помошните класи за клуч и вредност
// Исполнете ги барањата од текстот за toString методите
// Дополнително осигурете се дека вашата клуч класа ќе ги имплементира потребните
// hashCode и equals методи

class Person {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public int hashCode() {
        return (name != null && !name.isEmpty()) ? age * name.charAt(0) : 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Person person = (Person) obj;
        return age == person.age && Objects.equals(name, person.name);
    }

    @Override
    public String toString() {
        return "<" + name + ", " + age + ">";
    }
}

class Project {
    int time;
    int rate;

    public Project(int time, int rate) {
        this.time = time;
        this.rate = rate;
    }

    public int getTotalPay() {
        return time * rate;
    }

    @Override
    public String toString() {
        return "<" + time + ", " + rate + ">";
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        
        CBHT<Person, Project> table = new CBHT<>(10);

        for (int i = 0; i < N; i++) {
            
            String name = scanner.next();
            int age = scanner.nextInt();
            int time = scanner.nextInt();
            int rate = scanner.nextInt();

            Person person = new Person(name, age);
            Project project = new Project(time, rate);

            SLLNode<MapEntry<Person, Project>> node = table.search(person);
            
            if (node == null) {
                table.insert(person, project);
            } else {
                Project existingProject = node.element.value; // Access the value from the MapEntry
                if (existingProject.getTotalPay() < project.getTotalPay()) {
                    table.insert(person, project); // Replace with the better project
                }
            }
        }

        // Print the resulting hash table
        System.out.println(table);
    }
}


----------------------------------------------------------------------------------------------------------

FIXED?????


import java.util.Scanner;
import java.util.Objects;

class Person {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public int hashCode() {
        return (name != null && !name.isEmpty()) ? age * name.charAt(0) : 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Person person = (Person) obj;
        return age == person.age && Objects.equals(name, person.name);
    }

    @Override
    public String toString() {
        return "<" + name + ", " + age + ">";
    }
}

class Project {
    int time;
    int rate;

    public Project(int time, int rate) {
        this.time = time;
        this.rate = rate;
    }

    public int getTotalPay() {
        return time * rate;
    }

    @Override
    public String toString() {
        return "<" + time + ", " + rate + ">";
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();

        CBHT<Person, Project> table = new CBHT<>(10);

        for (int i = 0; i < N; i++) {
            String name = scanner.next();
            int age = scanner.nextInt();
            int time = scanner.nextInt();
            int rate = scanner.nextInt();

            Person person = new Person(name, age);
            Project project = new Project(time, rate);

            SLLNode<MapEntry<Person, Project>> node = table.search(person);

            if (node == null) {
                table.insert(person, project);
            } else {
                Project existingProject = node.element.value;
                if (existingProject.getTotalPay() < project.getTotalPay()) {
                    table.insert(person, project);
                }
            }
        }

        // Печатење на хеш-табелата
        System.out.println(table);
    }
}



---------------------------------------------------------------------------------------------

TOCNA VO INTELLIJ:

import java.util.*;


class MapEntry<K extends Comparable<K>, E> {
    // Each MapEntry object is a pair consisting of a key (a Comparable object)
    // and a value (an arbitrary object).
    K key;
    E value;

    public MapEntry(K key, E val) {
        this.key = key;
        this.value = val;
    }

    public String toString() {
        return "<" + key + "," + value + ">";
    }
}

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}




class CBHT<K extends Comparable<K>, E> {

    // An object of class CBHT is a closed-bucket hash table, containing
    // entries of class MapEntry.
    private SLLNode<MapEntry<K, E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        // Construct an empty CBHT with m buckets.
        buckets = (SLLNode<MapEntry<K, E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }

    public SLLNode<MapEntry<K, E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is equal to targetKey.
        // Return a link to that node (or null if there is none).
        int b = hash(targetKey);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(targetKey)) return currNode;
            else currNode = currNode.succ;
        }
        return null;
    }

    public void insert(K key, E val) {
        // Insert the entry <key, val> into this CBHT.
        // If entry with same key exists, overwrite it.
        MapEntry<K, E> newEntry = new MapEntry<>(key, val);
        int b = hash(key);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                // Make newEntry replace the existing entry ...
                currNode.element = newEntry;
                return;
            } else currNode = currNode.succ;
        }
        // Insert newEntry at the front of the SLL in bucket b ...
        buckets[b] = new SLLNode<>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        SLLNode<MapEntry<K, E>> predNode = null, currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                if (predNode == null) buckets[b] = currNode.succ;
                else predNode.succ = currNode.succ;
                return;
            } else {
                predNode = currNode;
                currNode = currNode.succ;
            }
        }
    }

    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            SLLNode<MapEntry<K, E>> curr = buckets[i];
            while (curr != null) {
                temp += curr.element.toString() + " ";
                curr = curr.succ;
            }
            temp += "\n";
        }
        return temp;
    }
}

class OBHT<K extends Comparable<K>, E> {

    // An object of class OBHT is an open-bucket hash table, containing entries
    // of class MapEntry.
    private MapEntry<K, E>[] buckets;

    // buckets[b] is null if bucket b has never been occupied.
    // buckets[b] is former if bucket b is formerly-occupied
    // by an entry that has since been deleted (and not yet replaced).

    static final int NONE = -1; // ... distinct from any bucket index.

    @SuppressWarnings({"rawtypes", "unchecked"})
    private static final MapEntry former = new MapEntry(null, null);
    // This guarantees that, for any genuine entry e,
    // e.key.equals(former.key) returns false.

    private int occupancy = 0;
    // ... number of occupied or formerly-occupied buckets in this OBHT.

    @SuppressWarnings("unchecked")
    public OBHT(int m) {
        // Construct an empty OBHT with m buckets.
        buckets = (MapEntry<K, E>[]) new MapEntry[m];
    }


    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }


    public int search(K targetKey) {
        // Find which if any bucket of this OBHT is occupied by an entry whose key
        // is equal to targetKey. Return the index of that bucket.
        int b = hash(targetKey);

        for (int n_search = 0; n_search < buckets.length; n_search++) {
            MapEntry<K, E> currEntry = buckets[b];
            if (currEntry == null) return NONE;
            else if (currEntry.key.equals(targetKey)) return b;
            else b = (b + 1) % buckets.length;
        }
        return NONE;
    }

    public MapEntry<K, E> getBucket(int bucket) {
        return buckets[bucket];
    }


    public void insert(K key, E val) {
        // Insert the entry <key, val> into this OBHT.
        MapEntry<K, E> newEntry = new MapEntry<K, E>(key, val);
        int b = hash(key);
        int n_search = 0;
        Integer free_position = null;
        Integer existing_position = null;
        while (n_search < buckets.length) {
            MapEntry<K, E> currEntry = buckets[b];
            if (currEntry == null) {
                if (free_position == null) free_position = b;
                break;
            } else if (key.equals(currEntry.key)) {
                existing_position = b;
                break;
            } else {
                if (currEntry == former && free_position == null) {
                    free_position = b;
                }
                b = (b + 1) % buckets.length;
                n_search++;
            }
        }
        if (existing_position != null)
            buckets[existing_position] = newEntry;
        else if (free_position != null) {
            buckets[free_position] = newEntry;
            if (++occupancy == buckets.length) {
                System.out.println("Hash tabelata e polna!!!");
            }
        } else {
            // failed to insert, table was already full
        }
    }


    @SuppressWarnings("unchecked")
    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this OBHT.
        int b = hash(key);
        int n_search = 0;
        while (n_search < buckets.length) {
            MapEntry<K, E> currEntry = buckets[b];
            if (currEntry == null) return;
            else if (currEntry.key.equals(key)) {
                buckets[b] = former;
                return;
            } else {
                b = (b + 1) % buckets.length;
                n_search++;
            }
        }
    }


    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            if (buckets[i] == null)
                temp += "\n";
            else if (buckets[i] == former)
                temp += "former\n";
            else
                temp += buckets[i] + "\n";
        }
        return temp;
    }


    public OBHT<K, E> clone() {
        OBHT<K, E> copy = new OBHT<K, E>(buckets.length);
        for (int i = 0; i < buckets.length; i++) {
            MapEntry<K, E> e = buckets[i];
            if (e != null && e != former)
                copy.buckets[i] = new MapEntry<K, E>(e.key, e.value);
            else
                copy.buckets[i] = e;
        }
        return copy;
    }
}



class Person implements Comparable<Person> {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public int compareTo(Person other) {
        // For comparison, you can decide how to compare two Person objects.
        // Here, we'll first compare by age, and if they're equal, by name.
        int ageComparison = Integer.compare(this.age, other.age);
        if (ageComparison != 0) {
            return ageComparison;
        } else {
            return this.name.compareTo(other.name); // Compare by name if ages are equal
        }
    }

    @Override
    public int hashCode() {
        return (name != null && !name.isEmpty()) ? age * name.charAt(0) : 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Person person = (Person) obj;
        return age == person.age && Objects.equals(name, person.name);
    }

    @Override
    public String toString() {
        return "<" + name + ", " + age + ">";
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}


class Project{
    int time;
    int pay;

    public Project(int time, int pay) {
        this.time = time;
        this.pay = pay;
    }

    public int getTime() {
        return time;
    }

    public void setTime(int time) {
        this.time = time;
    }

    public int getPay() {
        return pay;
    }

    public void setPay(int pay) {
        this.pay = pay;
    }
    @Override
    public String toString() {
        return "<" + time + ", " + pay + ">";
    }
    public int getTotalPay() {
        return time * pay;
    }
}



public class Main {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int N=sc.nextInt();
        CBHT<Person, Project> table = new CBHT<>(10);

        for (int i = 0; i < N; i++) {
            String name =sc.next();
            int age =sc.nextInt();
            int time =sc.nextInt();
            int pay =sc.nextInt();
            Person person = new Person(name, age);
            Project project = new Project(time, pay);

            SLLNode<MapEntry<Person, Project>> node =table.search(person);


            if(node==null){
                table.insert(person, project);
            }else{
                Project existingProject=node.element.value;
                if(existingProject.getTotalPay()<project.getTotalPay()){
                    table.insert(person, project);
                }
            }
        }
        System.out.println(table);

    }
}


2.  На влез во оваа задача ќе ви бидат дадени редови како следниот формат:
Ime Prezime budzhet ip_adresa vreme grad cena
Пример
Jovan Todorov 1000 10.73.112.200 15:30 Bitola 760
Кое што значи дека лицето со Име и Презиме Jovan Todorov, има буџет од 1000 денари, има IP адреса со мрежа 10.73.112 и домаќин (host number) 200, и се приклучил во 15:30 часот за да купи билет кон Bitola кој што чини 760 денари.

Ќе ви бидат дадени N такви редови, по што ќе следи празен ред па уште M редови од истиот формат, кои ќе ги користиме за тестирање.

Од редот за тестирање треба да го извадите градот и потоа да го одговорите следното прашање со овој град:

Од сите N лица на влез, кои купуваат билет за до истиот град
колку од нив имале доволно буџет за да го купат билетот; и
од овие, кој од нив платил најголем износ?

(погледнете го тест примерот!)

(доколку има повеќе со ист најголем износ тогаш кој е првиот таков во влезот?) (секогаш ќе постои барем еден таков)


Ова ќе треба да го направите за сите M редови за тестирање!

Препорака, користете OBHT и/или CBHT. 

For example:

Input	Result
5
Jovan Todorov    1000    10.73.112.200     16:30   Bitola     760
Mitko Janev      4350    132.28.112.200    12:15   Krusevo    4000
Sara Dobreva     2700    10.73.60.29       14:35   Bitola     2500
Mence Trajanova  4000    10.73.112.112     11:25   Bitola     4200
Viktor Jovev     2200    10.73.112.79      15:15   Strumica   1800

1
Jovan Todorov    1000    10.73.112.200     16:30   Bitola     760
City: Bitola has the following number of customers:
2
The user who spent the most purchasing for that city is:
Sara Dobreva with salary 2700 from address 10.73.60.29 who spent 2500
25
Marko Stankovic    1200       192.168.0.10     10:45  Skopje     1500  
Ana Petrovska      800        192.168.0.20     15:00  Bitola     760  
Stefan Jovanovic   1500       192.168.0.30     11:30  Ohrid      1100  
Elena Pavlova      600        192.168.0.40     14:15  Tetovo     750  
Ivan Mitrevski     1300       192.168.0.50     16:45  Veles      900  
Mila Nikolova      900        10.0.1.10        10:00  Skopje     700  
Kristina Ristevska 500        10.0.1.20        15:30  Bitola     1200  
Darko Nikolic      1500       10.0.1.30        12:00  Ohrid      1500  
Marija Filipova    850        10.0.1.40        17:45  Tetovo     600  
Aleksandar Kosta   1000       10.0.1.50        13:15  Veles      1400  
Petar Jovanovski   2000       172.16.5.10      08:45  Skopje     1000  
Ivana Velickova    800        172.16.5.20      14:45  Bitola     700  
Dejan Stojanov     900        172.16.5.30      13:30  Ohrid      1300  
Tamara Ilijevska   1500       172.16.5.40      16:00  Tetovo     1700  
Filip Atanasov     2100       172.16.5.50      09:00  Veles      2050  
Simona Milanova    600        192.168.2.10     15:00  Skopje     650  
Aleksandra Petrova 1200       192.168.2.20     14:30  Bitola     800  
Goran Kostadinov   850        192.168.2.30     11:15  Ohrid      700  
Maja Georgieva     1600       192.168.2.40     18:00  Tetovo     1200  
Nikola Nikolovski  1400       192.168.2.50     08:30  Veles      1450  
Lazar Angelov      700        10.1.2.10         09:45  Skopje     1200  
Milena Stojanovska 1300       10.1.2.20         16:30  Bitola     900  
Aleksandar Dimeski 800        10.1.2.30         11:15  Ohrid      850  
Katerina Trajkoska 1500       10.1.2.40         14:45  Tetovo     1400  
Viktor Pejkovski   950        10.1.2.50         13:00  Veles      800  

5
Marko Stankovic    1200       192.168.0.10     10:45  Skopje     1500  
Kristina Ristevska 500        10.0.1.20        15:30  Bitola     1200  
Dejan Stojanov     900        172.16.5.30      13:30  Ohrid      1300  
Maja Georgieva     1600       192.168.2.40     18:00  Tetovo     1200  
Viktor Pejkovski   950        10.1.2.50         13:00  Veles      800  
City: Skopje has the following number of customers:
2
The user who spent the most purchasing for that city is:
Petar Jovanovski with salary 2000 from address 172.16.5.10 who spent 1000

City: Bitola has the following number of customers:
4
The user who spent the most purchasing for that city is:
Milena Stojanovska with salary 1300 from address 10.1.2.20 who spent 900

City: Ohrid has the following number of customers:
3
The user who spent the most purchasing for that city is:
Darko Nikolic with salary 1500 from address 10.0.1.30 who spent 1500

City: Tetovo has the following number of customers:
3
The user who spent the most purchasing for that city is:
Katerina Trajkoska with salary 1500 from address 10.1.2.40 who spent 1400

City: Veles has the following number of customers:
3
The user who spent the most purchasing for that city is:
Filip Atanasov with salary 2100 from address 172.16.5.50 who spent 2050




import java.util.*;

class MapEntry<K extends Comparable<K>, E> {
    K key;
    E value;

    public MapEntry(K key, E val) {
        this.key = key;
        this.value = val;
    }

    public String toString() {
        return "<" + key + "," + value + ">";
    }
}

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class CBHT<K extends Comparable<K>, E> {
    private SLLNode<MapEntry<K, E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        buckets = (SLLNode<MapEntry<K, E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        return Math.abs(key.hashCode()) % buckets.length;
    }

    public SLLNode<MapEntry<K, E>> search(K targetKey) {
        int b = hash(targetKey);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(targetKey)) return currNode;
            else currNode = currNode.succ;
        }
        return null;
    }

    public void insert(K key, E val) {
        MapEntry<K, E> newEntry = new MapEntry<>(key, val);
        int b = hash(key);
        SLLNode<MapEntry<K, E>> currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                currNode.element = newEntry;
                return;
            } else currNode = currNode.succ;
        }
        buckets[b] = new SLLNode<>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        int b = hash(key);
        SLLNode<MapEntry<K, E>> predNode = null, currNode = buckets[b];
        while (currNode != null) {
            MapEntry<K, E> currEntry = currNode.element;
            if (currEntry.key.equals(key)) {
                if (predNode == null) buckets[b] = currNode.succ;
                else predNode.succ = currNode.succ;
                return;
            } else {
                predNode = currNode;
                currNode = currNode.succ;
            }
        }
    }

    public String toString() {
        StringBuilder temp = new StringBuilder();
        for (int i = 0; i < buckets.length; i++) {
            temp.append(i).append(":");
            SLLNode<MapEntry<K, E>> curr = buckets[i];
            while (curr != null) {
                temp.append(curr.element.toString()).append(" ");
                curr = curr.succ;
            }
            temp.append("\n");
        }
        return temp.toString();
    }
}

class City {
    String name;
    String surname;
    int budzhet;
    String ip;
    String time;
    String grad;
    int cena;

    public City(String name, String surname, int budzhet, String ip, String time, String grad, int cena) {
        this.name = name;
        this.surname = surname;
        this.budzhet = budzhet;
        this.ip = ip;
        this.time = time;
        this.grad = grad;
        this.cena = cena;
    }

    public String getName() {
        return name;
    }

    public String getSurname() {
        return surname;
    }

    public int getBudzhet() {
        return budzhet;
    }

    public String getIp() {
        return ip;
    }

    public String getTime() {
        return time;
    }

    public String getGrad() {
        return grad;
    }

    public int getCena() {
        return cena;
    }

    @Override
    public String toString() {
        return name + " " + surname + " with salary " + budzhet + " from address " + ip + " who spent " + cena;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.nextLine();  // To consume the newline character after nextInt()

        CBHT<String, List<City>> hashtable = new CBHT<>(2 * N);

        // Read the N rows
        for (int i = 0; i < N; i++) {
            String[] parts = sc.nextLine().split("\\s+");
            String name = parts[0];
            String surname = parts[1];
            int budzhet = Integer.parseInt(parts[2]);
            String ip = parts[3];
            String time = parts[4];
            String grad = parts[5];
            int cena = Integer.parseInt(parts[6]);

            City city = new City(name, surname, budzhet, ip, time, grad, cena);

            if (city.getBudzhet() >= city.getCena()) {
                SLLNode<MapEntry<String, List<City>>> node = hashtable.search(city.getGrad());
                if (node == null) {
                    List<City> cityList = new ArrayList<>();
                    cityList.add(city);
                    hashtable.insert(city.getGrad(), cityList);
                } else {
                    List<City> cityList = node.element.value;
                    cityList.add(city);
                }
            }
        }

        int M = sc.nextInt();
        sc.nextLine();  // To consume the newline character after nextInt()

        for (int i = 0; i < M; i++) {
            String[] parts = sc.nextLine().split("\\s+");
            String grad = parts[5];

            // Search for the city in the hash table
            SLLNode<MapEntry<String, List<City>>> node = hashtable.search(grad);
            if (node != null) {
                List<City> customers = node.element.value;

                // Count customers who can afford the ticket
                long count = customers.stream().filter(c -> c.getBudzhet() >= c.getCena()).count();
                System.out.println("City: " + grad + " has the following number of customers:");
                System.out.println(count);

                // Find the customer who spent the most
                City maxSpender = customers.stream()
                        .filter(c -> c.getBudzhet() >= c.getCena())
                        .max(Comparator.comparingInt(City::getCena))
                        .orElse(null);

                if (maxSpender != null) {
                    System.out.println("The user who spent the most purchasing for that city is:");
                    System.out.println(maxSpender);
                }
            } else {
                System.out.println("City: " + grad + " has the following number of customers:");
                System.out.println(0);
            }
        }
    }
}


-------------------------------------------------------------------------------------------------------------------------

POLESNA VARIJANTA:

import java.time.LocalTime;
import java.util.*;

//At the input of this task you will be given rows with the following format:
//First_name Last_name budget ip_address time city price
//Example
//Jovan Todorov 1000 10.73.112.200 15:30 Bitola 760
//Which means that the person with First name and Last name Jovan Todorov, has a budget of 1000 denars, has an IP address with network 10.73.112 and host number 200, and joined at 15:30 to buy a 
//ticked to Bitola which costs 760 denars.
//You will be given N such rows, followed by an empty row and M more rows of the same format, which we will use for testing.
//From the test row you need to extract the city and then answer the following question with this city:
//Of the N people at the input, from the ones who buy a ticket to the same city
//how many of them joined later than 11:59; and
//of these, which one joined the earliest?
//(if there are more with the same minimum time then which one is the first one in the entry?) (there will always be at least one)
//You will need to do this for all M rows for testing!

import java.time.LocalTime;
import java.util.*;

class MapEntry<K extends Comparable<K>,E> implements Comparable<K> {

    K key;
    E value;

    public MapEntry (K key, E val) {
        this.key = key;
        this.value = val;
    }

    public int compareTo (K that) {

        @SuppressWarnings("unchecked")
        MapEntry<K,E> other = (MapEntry<K,E>) that;
        return this.key.compareTo(other.key);
    }

    public String toString () {
        return "<" + key + "," + value + ">";
    }
}


class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}


class OBHT<K extends Comparable<K>,E> {

    // An object of class OBHT is an open-bucket hash table, containing entries
    // of class MapEntry.
    private MapEntry<K,E>[] buckets;

    // buckets[b] is null if bucket b has never been occupied.
    // buckets[b] is former if bucket b is formerly-occupied
    // by an entry that has since been deleted (and not yet replaced).

    static final int NONE = -1; // ... distinct from any bucket index.

    @SuppressWarnings({ "rawtypes", "unchecked" })
    private static final MapEntry former = new MapEntry(null, null);
    // This guarantees that, for any genuine entry e,
    // e.key.equals(former.key) returns false.

    private int occupancy = 0;
    // ... number of occupied or formerly-occupied buckets in this OBHT.

    @SuppressWarnings("unchecked")
    public OBHT (int m) {
        // Construct an empty OBHT with m buckets.
        buckets = (MapEntry<K,E>[]) new MapEntry[m];
    }


    private int hash (K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }


    public int search (K targetKey) {
        // Find which if any bucket of this OBHT is occupied by an entry whose key
        // is equal to targetKey. Return the index of that bucket.
        int b = hash(targetKey); int n_search=0;
        for (;;) {
            MapEntry<K,E> oldEntry = buckets[b];
            if (oldEntry == null)
                return NONE;
            else if (targetKey.equals(oldEntry.key))
                return b;
            else
            {
                b = (b + 1) % buckets.length;
                n_search++;
                if(n_search==buckets.length)
                    return NONE;

            }
        }
    }


    public void insert (K key, E val) {
        // Insert the entry <key, val> into this OBHT.
        MapEntry<K,E> newEntry = new MapEntry<K,E>(key, val);
        int b = hash(key); int n_search=0;
        for (;;) {
            MapEntry<K,E> oldEntry = buckets[b];
            if (oldEntry == null) {
                if (++occupancy == buckets.length) {
                    System.out.println("Hash tabelata e polna!!!");
                }
                buckets[b] = newEntry;
                return;
            }
            else if (oldEntry == former
                    || key.equals(oldEntry.key)) {
                buckets[b] = newEntry;
                return;
            }
            else
            {
                b = (b + 1) % buckets.length;
                n_search++;
                if(n_search==buckets.length)
                    return;

            }
        }
    }


    @SuppressWarnings("unchecked")
    public void delete (K key) {
        // Delete the entry (if any) whose key is equal to key from this OBHT.
        int b = hash(key); int n_search=0;
        for (;;) {
            MapEntry<K,E> oldEntry = buckets[b];

            if (oldEntry == null)
                return;
            else if (key.equals(oldEntry.key)) {
                buckets[b] = former;//(MapEntry<K,E>)former;
                return;
            }
            else{
                b = (b + 1) % buckets.length;
                n_search++;
                if(n_search==buckets.length)
                    return;

            }
        }
    }


    public String toString () {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            if (buckets[i] == null)
                temp += "\n";
            else if (buckets[i] == former)
                temp += "former\n";
            else
                temp += buckets[i] + "\n";
        }
        return temp;
    }


    public OBHT<K,E> clone () {
        OBHT<K,E> copy = new OBHT<K,E>(buckets.length);
        for (int i = 0; i < buckets.length; i++) {
            MapEntry<K,E> e = buckets[i];
            if (e != null && e != former)
                copy.buckets[i] = new MapEntry<K,E>(e.key, e.value);
            else
                copy.buckets[i] = e;
        }
        return copy;
    }

    public MapEntry<K,E> getBucket(int index) {
        return buckets[index];
    }
}


class Person{
    String name;
    String surname;
    String ipAddress;
    int salary;
    int moneySpent;
    String city;
    String time;

    Person(String name,String surname, String ipAddress, int salary, String time, int moneySpent, String city){
        this.name = name;
        this.surname = surname;
        this.ipAddress = ipAddress;
        this.salary = salary;
        this.moneySpent = moneySpent;
        this.city = city;
        this.time = time;
    }

    int timeToMins(){
        int hr = Integer.parseInt(time.split(":")[0]);
        int min = Integer.parseInt(time.split(":")[1]);
        return hr * 60 * min;
    }

    @Override
    public String toString() {
        return name + " " + surname + " with salary " + salary + " from address " + ipAddress + " who logged in at " + time;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        OBHT<String, List<Person>> table = new OBHT<>(n * 2);

        for (int i = 0; i < n; i++) {
            String[] parts = sc.nextLine().split("\\s+");
            String name = parts[0], surname = parts[1], ip = parts[3], time = parts[4], city = parts[5];
            int budget = Integer.parseInt(parts[2]), price = Integer.parseInt(parts[6]);
            int index = table.search(city);
            if (index == -1) {
                table.insert(city, new ArrayList<>());
            }
            index = table.search(city);
            if (Integer.parseInt(time.split(":")[0]) >= 12)
                table.getBucket(index).value.add(new Person(name, surname, ip, budget, time, price, city));
        }


        int m = sc.nextInt();
        sc.nextLine();

        for (int i = 0; i < m; i++) {
            String[] parts = sc.nextLine().split("\\s+");
            String city = parts[5];
            int index = table.search(city);
            List<Person> people = table.getBucket(index).value;
            System.out.println("City: " + city + " has the following number of customers:");
            System.out.println(people.size());
            System.out.println("The user who logged on earliest after noon from that city is:");

            Person earliestPerson = people.get(0);
            for(Person person : people){
                LocalTime logInTime = LocalTime.parse(person.time);
                if(logInTime.isBefore(LocalTime.parse(earliestPerson.time))){
                    earliestPerson = person;
                }
            }
            System.out.println(earliestPerson);
            System.out.println();
        }
    }
}



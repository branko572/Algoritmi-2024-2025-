SLL - Влезна задача

Се внесува број на стрингови, се печати низата пред промени, секој стринг што почнува со мала буква се преместува на крајот од листата, и па се печате листата

Input
4
ova
Eden
Zdravo
hawaii

Output
ova -> Eden -> Zdravo -> hawaii
Eden -> Zdravo -> ova -> hawaii



public class Main{
    public static void main(String[] args){
        Scanner sc =new Scanner(System.in);
        int N= sc.nextInt();

        SLL<String>list=new SLL<>();

        for(int i=0;i<N;i++){
            list.insertLast(sc.next());
        }

        SLLNode<String>current=list.getFirst();

        System.out.println(list);

        int processed = 0;

        while(current != null && processed < N){
            String temp = current.element;
            SLLNode<String> next = current.succ;

            if(Character.isLowerCase(temp.charAt(0))){
                list.insertLast(temp);
                list.delete(current);
            }

            current = next;
            processed++;
        }
        System.out.println(list);


    }
}



Queue - Влезна задача

Наредени луѓе со број на барања, им се извршува едно барање и се враќаат назад во редот. Печати редослед на завршување на луѓето. 

Input
5
Nenad 3
Slave 1
Martin 2
Ana 1
Igor 2

Output
Slave
Ana
Martin
Igor
Nenad

-----

DP

Најди го бројот на wow поднизи во стринг

Input
wwoww
Output
4

Explanitaion:
w-ow-
w-o-w
-wow-
-wo-w

Input
ooooowwwwwoooo
Output
0

Input
woowow
Output
6с

Начин:
wo-w--
wo---w
w-ow--
w-o--w
w---ow
---wow


----

Stack

Најди ја фунцкијата што повикува највеќе фунцкии во неа. Секоја фунцкија има Call x - x е името на фунцкијата - и Return.

Input
12
Call a
Call b
Call c
Return
Call d
Return
Call e
Return
Return
Call f
Return
Return

Output
b 3

Објаснување: во b се повикани c d и e

---


class Person{
    int queue;
    String name;

    Person(String name, int queue) {
        this.name = name;
        this.queue = queue;
    }
}




public class Main {
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();


        sc.nextLine();
        ArrayQueue<Person> q = new ArrayQueue<>(N*2);
        for(int i=0; i<N; i++){
            String line = sc.nextLine(); // read full line like "Nenad 3"
            String[] parts = line.split("\\s+"); // split by space
            String name = parts[0];
            int queue = Integer.parseInt(parts[1]);
            q.enqueue(new Person(name, queue));
        }
          while (!q.isEmpty()) {
            Person p = q.dequeue(); // take the first person
            p.queue--; // process one request

            if (p.queue == 0) {
                System.out.println(p.name); // done
            } else {
                q.enqueue(p); // go to the back of the line
            }
        }

    }
}







public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        ArrayStack<String> stack = new ArrayStack<>(N);
        boolean flag = true;

        for (int i = 0; i < N; i++) {
            String line = br.readLine();
            if (line.startsWith("#")) {
                if (!stack.isEmpty()) {
                    String str = stack.peek();
                    char PrStack = str.charAt(str.length() - 1);
                    char PrString = line.charAt(line.length() - 1);

                    if (Character.isDigit(PrStack) && Character.isDigit(PrString)) {
                        int IntStack = Integer.parseInt(String.valueOf(PrStack));
                        int IntString = Integer.parseInt(String.valueOf(PrString));
                        if (IntStack > IntString) {
                            flag = false;
                            break;
                        }
                    } else if (Character.isLetter(PrStack) && Character.isLetter(PrString)) {
                        if (PrStack != PrString) {
                            flag = false;
                            break;
                        }
                    } else if (Character.isDigit(PrStack) && Character.isLetter(PrString)) {
                        // Дозволено е, нема ништо да се прави
                    } else {
                        flag = false;
                        break;
                    }
                }
                stack.push(line.substring(1));
            } else if (line.endsWith("#")) {
                if (!stack.isEmpty()) {
                    if (stack.peek().equals(line.substring(0, line.length() - 1))) {
                        stack.pop();
                    } else {
                        flag = false;
                        break;
                    }
                } else {
                    flag = false;
                    break;
                }
            }
        }

        if (!stack.isEmpty() || !flag) {
            System.out.println("false");
        } else {
            System.out.println("true");
        }
    }
}

1.

Дадена е улица на која има поставено места за улични светилки. 
Улицата е со должина M и N такви места на кои можат да се постават улични светилки и нивната позиција е дадена во една низа. 
Ако знаеме дека една светилка освен својата позиција осветлува и уште две позиции во лево и две во десно, да се најде најмалиот број на светилки со кои може да се осветли улицата.
Не мора да поставуваме светилка на секоја можна позиција.  
Влез: Првиот број од влезот е бројот на позиции за светилки N и должината на улицата M, а потоа во следниот ред се дадените можните позиции за поставување на светилки. 
Излез: Минимален број на светилки за да се осветли улицата.   

Input                                                                           
5 5                                                                                  
1 2 3 4 5  

Result                                                                            
1   

Input                                                                                
3 10                                                                                     
3 8 9 

Result                                                                              
2

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Read number of positions and length of the street
        int N = sc.nextInt();
        int M = sc.nextInt();

        // Read possible positions for placing streetlights
        int[] positions = new int[N];
        for (int i = 0; i < N; i++) {
            positions[i] = sc.nextInt();
        }

        // Sort positions for a greedy approach
        Arrays.sort(positions);

        int lights = 0;  // Number of streetlights placed
        int currentPos = 1;  // Current unlit position on the street
        int i = 0;  // Index for positions array

        // Greedily place streetlights
        while (currentPos <= M) {
            // Find the farthest position that can cover currentPos
            int bestPos = -1;
            while (i < N && positions[i] <= currentPos + 2) {
                bestPos = positions[i];
                i++;
            }

            // If there's no valid position to cover currentPos, the street can't be fully lit
            if (bestPos == -1) {
                System.out.println(-1);  // Street can't be fully covered
                return;
            }

            // Place a streetlight at bestPos
            lights++;
            currentPos = bestPos + 3;  // Move to the next unlit position after the coverage of bestPos
        }

        System.out.println(lights);  // Output the minimal number of streetlights
    }
}


2.

Дадени се N задачи кои треба да се изработат. 
За секоја од задачите го знаеме времето за изработка (во часови) и заработката која ја носи.
Да се најде максималната заработка во рок од една 40 часовна работна недела. 
Напомена дека и делѕмно сработени задачи носат делумна заработка, во зависност од процентот на завршеност. 

Влез: Првиот број од влезот е бројт на задачи N, а потоа во следниот ред на времетраењето на за задачата во часови и заработката која ја носи. 

Излез: Максимална заработка која моЌеме да ја направиме за 40 часа.      

Input                                                                                                                          
3                                                                                                                                             
10 60                                                                                                                                       
20 100                                                                                                                                    
30 120 

Result                                                                                                                                       
200  

Input                                                                                                                                        
1                                                                                                                                                           
10 60 

Result                                                                                                                                             
60


import java.util.Arrays;
import java.util.Scanner;

class Task implements Comparable<Task> {
    int time;      // Time required for the task in hours
    int earnings;  // Earnings for the task

    // Constructor for Task
    Task(int time, int earnings) {
        this.time = time;
        this.earnings = earnings;
    }

    // Calculate earnings per hour, used for sorting tasks
    double getEarningsPerHour() {
        return (double) earnings / time;
    }

    // Sort tasks by earnings per hour in descending order
    @Override
    public int compareTo(Task other) {
        return Double.compare(other.getEarningsPerHour(), this.getEarningsPerHour());
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Read the number of tasks
        int N = sc.nextInt();
        Task[] tasks = new Task[N];

        // Read each task's time and earnings and create Task objects
        for (int i = 0; i < N; i++) {
            int time = sc.nextInt();
            int earnings = sc.nextInt();
            tasks[i] = new Task(time, earnings);
        }

        // Sort tasks by earnings per hour in descending order
        Arrays.sort(tasks);

        int remainingHours = 40;  // Maximum working hours in a week
        double maxEarnings = 0;   // Accumulated earnings

        // Iterate over sorted tasks to maximize earnings within 40 hours
        for (Task task : tasks) {
            if (remainingHours >= task.time) {
                // If we have enough time to complete this task fully
                maxEarnings += task.earnings;
                remainingHours -= task.time;
            } else {
                // If not enough time, take a fractional part of the task
                maxEarnings += task.getEarningsPerHour() * remainingHours;
                break;  // We have used up the 40 hours
            }
        }

        // Print the maximum possible earnings within the 40-hour limit
        System.out.println(maxEarnings);
    }
}


------------------------------------------------------------------------------------



import java.util.Scanner;

class vezba2 {
    public static void sortirajOdnos(int z[], int v[]){
        int n = z.length;
        int tmpV, tmpZ;
        for(int i = 0; i<n; i++){
            for(int j = i+1; j<n; j++){
                if(((float) z[i]/ (float) v[i]) < ((float) z[j]/ (float) v[j])){
                    tmpZ = z[i];
                    tmpV = v[i];
                    z[i] = z[j];
                    v[i] = v[j];
                    v[j] = tmpV;
                    z[j] = tmpZ;
                }
            }
        }
    }
    public static float calculate(int z[], int v[])
    {
        int n = z.length;
        sortirajOdnos(z, v);
        float result = 0.0f;
        float time = 40f;
        for(int i = 0; i<n; i++){
            if(time > v[i]){
                result += z[i];
                time-=v[i];
            } else {
                result += (time / (float) v[i]) * (float) z[i];
                time = 0;
                break;
            }
        }
        return result;
    }
    public static void main(String[] args){
        Scanner input =  new Scanner(System.in);
        int n = input.nextInt();
        int []zarabotka = new int[n];
        int []vreme = new int[n];
        for(int i = 0; i < n; i++){
            vreme[i] = input.nextInt();
            zarabotka[i] = input.nextInt();
        }
        System.out.println(calculate(zarabotka, vreme));
        input.close();
    }
}


Дадена е сортирана низа од N броеви и број М кој го бараме во таа низа. Со помош на методата „раздели па владеј“ да се имплементира бинарно пребарување, да се најде бараниот број во таа низа и да се испечати неговата позиција. Доколку бројот не е во низата да е испечати "Ne postoi".

Влез: Првиот број од влезот е големината на низата N и бараниот број М, а потоа во следниот ред се елементите на низата.


Излез: Позицијата на која се наоѓа бараниот број, или "Ne postoi" доколку бројот не се наоѓа во низата.

/

We are given an array of N numbers. Using the method "divide and conquer" write a binary search algorithm that searches for a given number M. If the number is found, print the position of the number in the array. If the number is not in the array, print "Ne postoi".

Input: The first number in the input is the size of the array N, and the number we are searching M. Then in the next line are the array elements.

Output: The position of the number we are searching, or "Ne postoi" if no such number exists in the array.

For example:

Input	
5 3
1 2 3 4 5

Result
2

Input	
7 7
1 2 3 4 5 6 7

Result
6



import java.util.Scanner;


public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();

        int M=sc.nextInt();
        int []array=new int[N];
        for (int i = 0; i < N; i++) {
            array[i]=sc.nextInt();

        }



        for(int i=0;i<N;i++){
            if(array[i]==M){
                System.out.println(i+" ");
                return;
            }
        }
        System.out.println("Ne postoi");

    }
}

----------------------------------------------------------------------



import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Read input size N and target M
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] array = new int[N];

        // Read the array elements
        for (int i = 0; i < N; i++) {
            array[i] = sc.nextInt();
        }

        // Perform binary search
        int result = binarySearch(array, M, 0, N - 1);

        // Output the result
        if (result == -1) {
            System.out.println("Ne postoi");
        } else {
            System.out.println(result); // Print position as 1-based index
        }

        sc.close();
    }

    // Binary search function using recursion
    public static int binarySearch(int[] array, int target, int low, int high) {
        if (low <= high) {
            int mid = (low + high) / 2;

            if (array[mid] == target) {
                return mid; // Return the position as zero-based index
            } else if (array[mid] < target) {
                return binarySearch(array, target, mid + 1, high);
            } else {
                return binarySearch(array, target, low, mid - 1);
            }
        }
        return -1; // Target not found
    }
}




Вметни просек ме´гу соседи
Дадена е двострано поврзана листа коjа содржи природни броеви. Ваша задача
е да jа преуредите влезната листата, т.ш. ме´гу секои два соседни jазли од влезната листа ´ке додадете нов jазел коj ´ке jа содржи средната вредност од двата
соседни jазли. Доколку средната вредност е децимална, тогаш броjот треба да
биде заокружен на поголемиот (пр. Ако соседните jазли имаат вредност 1 и 2,
нивната средна вредност е 1,5 и оваа вредност се заокружува на 2).
Влез: Од стандарден влез во првиот ред се дава цел броj N, коj го претставува броjот на елементи во листата, а во вториот се даваат броевите во листата
одделени со празно место.
Излез: Ваша задача е да jа испечатите резултантната листа.
Пример.
Влез:
3
1 2 4
Излез:
1 2 2 3 4

import java.util.Scanner;

class DLLNode<E> {
    protected E element;
    protected DLLNode<E> pred, succ;

    public DLLNode(E elem, DLLNode<E> pred, DLLNode<E> succ) {
        this.element = elem;
        this.pred = pred;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class DLL<E> {
    private DLLNode<E> first, last;

    public DLL() {
        this.first = null;
        this.last = null;
    }

    public void insertFirst(E o) {
        DLLNode<E> ins = new DLLNode<E>(o, null, first);
        if (first == null)
            last = ins;
        else
            first.pred = ins;
        first = ins;
    }

    public void insertLast(E o) {
        if (first == null)
            insertFirst(o);
        else {
            DLLNode<E> ins = new DLLNode<E>(o, last, null);
            last.succ = ins;
            last = ins;
        }
    }

    public void insertAfter(E o, DLLNode<E> after) {
        if (after == last) {
            insertLast(o);
            return;
        }
        DLLNode<E> ins = new DLLNode<E>(o, after, after.succ);
        after.succ.pred = ins;
        after.succ = ins;
    }

    public DLLNode<E> getFirst() {
        return first;
    }

    @Override
    public String toString() {
        String ret = new String();
        if (first != null) {
            DLLNode<E> tmp = first;
            ret += tmp.toString();
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret += " " + tmp.toString();
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        DLL<Integer> list = new DLL<>();

        // Insert elements into the list
        for (int i = 0; i < n; i++) {
            list.insertLast(sc.nextInt());
        }

        DLLNode<Integer> current = list.getFirst();

        // Process the list
        while (current != null && current.succ != null) {
            int sum = current.element + current.succ.element; // Calculate sum of current and next node
            int average = (int) Math.round((double) sum / 2); // Calculate average and round it

            // Insert the average after the current node
            list.insertAfter(average, current);

            // Move to the next pair
            current = current.succ.succ;
        }

        // Print the final list
        System.out.println(list);
    }
}

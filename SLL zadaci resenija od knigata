–ó–∞–¥–∞—á–∞ 1. –ò–∑–±—Ä–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–æ –ø–æj–∞–≤—É–≤–∞—ö–µ –Ω–∞ –±—Ä–æj
–î–∞–¥–µ–Ω–∞ –µ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ –ø–æ–≤—Ä–∑–∞–Ω–∞ –ª–∏—Å—Ç–∞ —á–∏–∏ —à—Ç–æ j–∞–∑–ª–∏ —Å–æ–¥—Ä–∂–∞—Ç —Ü–µ–ª–∏ –±—Ä–æ–µ–≤–∏. –ó–∞
–¥–∞–¥–µ–Ω –±—Ä–æj –æ–¥ —Ç–∞—Å—Ç–∞—Ç—É—Ä–∞, –ø–æ—Ç—Ä–µ–±–Ω–æ –µ –¥–∞ —Å–µ –æ—Ç—Å—Ç—Ä–∞–Ω–∏ –Ω–µ–≥–æ–≤–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–æ –ø–æj–∞–≤—É–≤–∞—ö–µ
(–¥–∞ —Å–µ –∏–∑–±—Ä–∏—à–µ j–∞–∑–æ–ª–æ—Ç —à—Ç–æ –≥–æ —Å–æ–¥—Ä–∂–∏ –±—Ä–æj–æ—Ç).
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ n. –í–æ —Å–ª–µ–¥–Ω–∏—Ç–µ n –ª–∏–Ω–∏–∏
—Å–µ –¥–∞–¥–µ–Ω–∏ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞. –í–æ –ø–æ—Å–ª–µ–¥–Ω–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –∫–æj —Ç—Ä–µ–±–∞
–¥–∞ —Å–µ –æ—Ç—Å—Ç—Ä–∞–Ω–∏ (–Ω–µ–≥–æ–≤–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–æ –ø–æj–∞–≤—É–≤–∞—ö–µ).
–ò–∑–ª–µ–∑: –ù–∞ –∏–∑–ª–µ–∑ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∞—Ç j–∞–∑–ª–∏—Ç–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞.
–ü—Ä–∏–º–µ—Ä.
–í–ª–µ–∑:
5
4
6
4
9
3
4
–ò–∑–ª–µ–∑:
4->6->9->3
–†–µ—à–µ–Ω–∏–µ
–†–µ—à–µ–Ω–∏–µ—Ç–æ –µ –¥–∞–¥–µ–Ω–æ –≤–æ main –º–µ—Ç–æ–¥–∞—Ç–∞ –≤–æ IzbrishiPosleden –∫–ª–∞—Å–∞—Ç–∞.



public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n=sc.nextInt();

        SLL<Integer> list = new SLL<>();

        for (int i = 0; i < n; i++) {
            list.insertLast(sc.nextInt());
        }

        int m=sc.nextInt();

        System.out.println(list);

        SLLNode<Integer> current = list.getFirst();
        SLLNode<Integer> deleter = null;

        while (current != null) {

            if (current.element.equals(m)) {
                deleter = current;
            }
            current=current.succ;
        }
        if(deleter!=null){
            list.delete(deleter);
            System.out.println(list);
        }
    }
}



–ó–∞–¥–∞—á–∞ 2. –ó–∞–º–µ–Ω–∏ —Å–æ—Å–µ–¥–∏
–î–∞–¥–µ–Ω–∞ –µ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ –ø–æ–≤—Ä–∑–∞–Ω–∞ –ª–∏—Å—Ç–∞ —á–∏–∏ —à—Ç–æ j–∞–∑–ª–∏ —Å–æ–¥—Ä–∂–∞—Ç –ø–æ –µ–¥–µ–Ω –ø—Ä–∏—Ä–æ–¥–µ–Ω
–±—Ä–æj. –î–∞ —Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–∞ –ª–∏—Å—Ç–∞—Ç–∞ —Ç–∞–∫–∞ —à—Ç–æ —Å–µ–∫–æj —Å–æ—Å–µ–¥–µ–Ω –ø–∞—Ä j–∞–∑–ª–∏ ¬¥–∫–µ —Å–∏ –≥–∏
–∑–∞–º–µ–Ω–∞—Ç –º–µ—Å—Ç–∞—Ç–∞ (–ø—Ä–≤–∏–æ—Ç —Å–æ –≤—Ç–æ—Ä–∏–æ—Ç, –ø–∞ —Ç—Ä–µ—Ç–∏–æ—Ç —Å–æ —á–µ—Ç–≤—Ä—Ç–∏–æ—Ç –∏—Ç–Ω...).
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ n. –í–æ —Å–ª–µ–¥–Ω–∏—Ç–µ n –ª–∏–Ω–∏–∏
—Å–µ –¥–∞–¥–µ–Ω–∏ –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞.
–ò–∑–ª–µ–∑: –ù–∞ –∏–∑–ª–µ–∑ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∞—Ç j–∞–∑–ª–∏—Ç–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞.
–ü—Ä–∏–º–µ—Ä.
–í–ª–µ–∑:
4
1
2
3
4
–ò–∑–ª–µ–∑:
2->1->4->3



public class Main {
    public static void main(String[] args) {
     Scanner sc = new Scanner(System.in);

     int n=sc.nextInt();

     SLL<Integer> list=new SLL<>();

     for(int i=0;i<n;i++){
         list.insertLast(sc.nextInt());
     }

     SLLNode<Integer> current=list.getFirst();
     SLLNode<Integer> prev=null;

     System.out.println(list);

    while(current!=null && current.succ!=null){
        int temp= current.element;
        current.element=current.succ.element;
        current.succ.element=temp;
        current=current.succ.succ;
    }
    System.out.println(list);

    }
}



–ó–∞–¥–∞—á–∞ 3. –†–∞–∑–¥–µ–ª–∏ –ª–∏—Å—Ç–∞
–î–∞–¥–µ–Ω–∞ –µ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ –ø–æ–≤—Ä–∑–∞–Ω–∞ –ª–∏—Å—Ç–∞ —Å–æ –ø—Ä–∏—Ä–æ–¥–Ω–∏ –±—Ä–æ–µ–≤–∏. –î–∞ —Å–µ –∫—Ä–µ–∏—Ä–∞–∞—Ç –¥–≤–µ
—Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∏ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ –ø–æ–≤—Ä–∑–∞–Ω–∏ –ª–∏—Å—Ç–∏ —Ç.—à. –≤–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞ ¬¥–∫–µ —Å–µ –∑–µ–º–∞–∞—Ç —Å–∞–º–æ
j–∞–∑–ª–∏—Ç–µ —à—Ç–æ —Å–æ–¥—Ä–∂–∞—Ç –ø–∞—Ä–Ω–∏ –±—Ä–æj, –ø—Ä–∏ —à—Ç–æ –¥–æ–∫–æ–ª–∫—É –≤–æ –ø—Ä–≤–∏—á–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞ –∏–º–∞ –ø–æ–≤–µ¬¥–∫–µ
—Å–æ—Å–µ–¥–Ω–∏ j–∞–∑–ª–∏ —Å–æ –ø–∞—Ä–Ω–∏ –±—Ä–æ–µ–≤–∏ —Å–µ –∑–µ–º–∞ —Å–∞–º–æ –ø–æ—Å–ª–µ–¥–Ω–∏–æ—Ç j–∞–∑–µ–ª. –°–ª–∏—á–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞
—Å–µ –ø—Ä–∏–º–µ–Ω—É–≤–∞ –∏ –∑–∞ –≤—Ç–æ—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞ –ª–∏—Å—Ç–∞, –ø—Ä–∏ —à—Ç–æ –æ–≤–¥–µ —Å–µ –∑–µ–º–∞–∞—Ç —Å–∞–º–æ j–∞–∑–ª–∏—Ç–µ
—à—Ç–æ —Å–æ–¥—Ä–∂–∞—Ç –Ω–µ–ø–∞—Ä–Ω–∏ –±—Ä–æ–µ–≤–∏, –ø—Ä–∏ —à—Ç–æ –∞–∫–æ –∏–º–∞ –ø–æ–≤–µ¬¥–∫–µ —Å–æ—Å–µ–¥–Ω–∏ j–∞–∑–ª–∏ —Å–æ –Ω–µ–ø–∞—Ä–Ω–∏
–±—Ä–æ–µ–≤–∏ —Å–µ –∑–µ–º–∞ —Å–∞–º–æ –ø–æ—Å–ª–µ–¥–Ω–∏–æ—Ç j–∞–∑–µ–ª.
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ n. –í–æ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏–Ω–∏j–∞ —Å–µ
–¥–∞–≤–∞–∞—Ç –±—Ä–æ–µ–≤–∏—Ç–µ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ –æ–¥–¥–µ–ª–µ–Ω–∏ —Å–æ –ø—Ä–∞–∑–Ω–æ –º–µ—Å—Ç–æ.
–ò–∑–ª–µ–∑: –ü—Ä–≤–æ —Å–µ –ø–µ—á–∞—Ç–∏ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞ —Å–æ –ø—Ä–æ—Å—Ç–∏ –±—Ä–æ–µ–≤–∏, –∞ –ø–æ—Ç–æ–∞ –≤–æ –Ω–æ–≤
—Ä–µ–¥ —Ç–∞–∞ —Å–æ –Ω–µ–ø—Ä–æ—Å—Ç–∏. –î–æ–∫–æ–ª–∫—É –Ω–µ–∫–æj–∞ –æ–¥ –ª–∏—Å—Ç–∏—Ç–µ –µ –ø—Ä–∞–∑–Ω–∞ —Å–µ –ø–µ—á–∞—Ç–∏: Prazna lista.
–ü—Ä–∏–º–µ—Ä.
–í–ª–µ–∑:
8
1 3 2 4 5 7 6 8
–ò–∑–ª–µ–∑:
4->8
3->7

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        SLL<Integer> list = new SLL<>();
        SLL<Integer> evenList = new SLL<>();
        SLL<Integer> oddList = new SLL<>();

        for (int i = 0; i < n; i++) {
            list.insertLast(sc.nextInt());
        }

        SLLNode<Integer> current = list.getFirst();
        Integer lastEven = null, lastOdd = null;

        while (current != null) {
            // Keep track of the last even or odd number in a sequence
            if (current.element % 2 == 0) {
                lastEven = current.element;
            } else {
                lastOdd = current.element;
            }

            // If the next node is null or a different parity, store the last one
            if (current.succ == null || (current.succ.element % 2 != current.element % 2)) {
                if (lastEven != null && current.element % 2 == 0) {
                    evenList.insertLast(lastEven);
                    lastEven = null;
                }
                if (lastOdd != null && current.element % 2 != 0) {
                    oddList.insertLast(lastOdd);
                    lastOdd = null;
                }
            }

            current = current.succ;  // Move to the next node
        }

        // Print results
        if (evenList.size() == 0) {
            System.out.println("Prazna lista");
        } else {
            System.out.println(evenList);
        }

        if (oddList.size() == 0) {
            System.out.println("Prazna lista");
        } else {
            System.out.println(oddList);
        }


    }
}

-------------------------------------------------------------------


import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;

         public class RazdeliLista {
 public static void main(String[] args) throws IOException {

        SLL<Integer> lista = new SLL<Integer>();
        SLL<Integer> parni = new SLL<Integer>();
         SLL<Integer> neparni = new SLL<Integer>();
       BufferedReader stdin = new BufferedReader(new
                InputStreamReader(System.in));
         String s = stdin.readLine();
         int N = Integer.parseInt(s);
         s = stdin.readLine();
        String[] pomniza = s.split(" ");
        for (int i = 0; i < N; i++) {
             lista.insertLast(Integer.parseInt(pomniza[i]));
            }

         SLLNode<Integer> pom = lista.getFirst();

         while(pom!=null){
             while(pom.succ!=null && pom.element%2==0 && pom.succ.element%2==0){
                 pom=pom.succ;
                 }
             while(pom.succ!=null && !(pom.element%2==0) &&
                    !(pom.succ.element%2==0)){
                 pom=pom.succ;
                }
             if(pom.element%2==0)
                parni.insertLast(pom.element);
             else
             neparni.insertLast(pom.element);
             pom = pom.succ;
             }

         if(parni.size()==0) System.out.println("Prazna lista");
         else System.out.println(parni);



         if(neparni.size()==0) System.out.println("Prazna lista");
         else System.out.println(neparni);
         }
 }

–ó–∞–¥–∞—á–∞ 3. –ü—Ä–µ—É—Ä–µ–¥–∏ –ª–∏—Å—Ç–∞
–î–∞–¥–µ–Ω–∞ –µ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ –ø–æ–≤—Ä–∑–∞–Ω–∞ –ª–∏—Å—Ç–∞ ùêø0 ‚Üí ùêø1 ‚Üí . . . ‚Üí ùêøùëõ‚àí1 ‚Üí ùêøùëõ. –ü—Ä–µ—É—Ä–µ–¥–µ—Ç–µ
–≥–∏ j–∞–∑–ª–∏—Ç–µ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ —Ç–∞–∫–∞ —à—Ç–æ –Ω–æ–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞ ¬¥–∫–µ –±–∏–¥–µ : ùêø0 ‚Üí ùêøùëõ ‚Üí ùêø1 ‚Üí ùêøùëõ‚àí1 ‚Üí
ùêø2 ‚Üí ùêøùëõ‚àí2...
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ n. –í–æ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏–Ω–∏j–∞ —Å–µ
–¥–∞–≤–∞–∞—Ç –±—Ä–æ–µ–≤–∏—Ç–µ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ –æ–¥–¥–µ–ª–µ–Ω–∏ —Å–æ –ø—Ä–∞–∑–Ω–æ –º–µ—Å—Ç–æ.
46

–ò–∑–ª–µ–∑: –ù–∞ –∏–∑–ª–µ–∑ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∏ –ø—Ä–µ—É—Ä–µ–¥–µ–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞
–ü—Ä–∏–º–µ—Ä.
–í–ª–µ–∑:
5
1 2 3 4 5
–ò–∑–ª–µ–∑:
1->5->2->4->3


 SLLNode<E> reverselist(SLLNode<E> node) {
 SLLNode<E> prev = null, curr = node, next;
 while (curr != null) {
 next = curr.succ;
 curr.succ = prev;
prev = curr;
 curr = next;
 }
 node = prev;
 return node;
 }

 void rearrange() {
 //1) –ù–∞j–¥–∏ j–∞ —Å—Ä–µ–¥–∏–Ω–∞—Ç–∞ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞
 SLLNode<E> sredina = this.getFirst();
 for(int i=1;i<this.size()/2;i++)
 sredina = sredina.succ;
 System.out.println(sredina.element);

 //2) –ü–æ–¥–µ–ª–∏ j–∞ –ª–∏—Å—Ç–∞—Ç–∞ –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω–∏
 //node1, –ø—Ä–≤–∏–æ—Ç j–∞–∑–µ–ª –æ–¥ –ø—Ä–≤–∞—Ç–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ 1 -> 2 -> 3
 //node2, –ø—Ä–≤–∏–æ—Ç j–∞–∑–µ–ª –æ–¥ –≤—Ç–æ—Ä–∞—Ç–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ 4 -> 5
 SLLNode<E> node1 = this.getFirst();
 SLLNode<E> node2 = sredina.succ;
 sredina.succ = null;

 //3) –ü—Ä–µ–≤—Ä—Ç–∏ j–∞ –≤—Ç–æ—Ä–∞—Ç–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç.–µ. 5 -> 4

 node2 = reverselist(node2);

 //4) –ù–∞–∏–∑–º–µ–Ω–∏—á–Ω–æ —Å–ø–æj—É–≤–∞j –≥–∏ j–∞–∑–ª–∏—Ç–µ
 SLLNode<E> node = new SLLNode<E>(null, null); //–ø–æ–º–æ—à–µ–Ω j–∞–∑o–ª
 // curr –µ –ø–æ–∫–∞–∂—É–≤–∞—á–æ—Ç –Ω–∞ –ø–æ–º–æ—à–Ω–∏–æ—Ç j–∞–∑–æ–ª
 // –æ–¥ –∫–∞–¥–µ ¬¥–∫–µ —Å–µ —Ñ–æ—Ä–º–∏—Ä–∞ –Ω–æ–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞
 SLLNode<E> curr = node;
 while (node1 != null || node2 != null) {

 // –ü—Ä–≤–æ –¥–æ–¥–∞j j–∞–∑–æ–ª –æ–¥ –ø—Ä–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞
 if (node1 != null) {
 curr.succ = node1;
 curr = curr.succ;
 node1 = node1.succ;
 }

 // –ü–∞ –¥–æ–¥–∞j j–∞–∑–æ–ª –æ–¥ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏—Å—Ç–∞
 if (node2 != null) {
curr.succ = node2;
curr = curr.succ;
 node2 = node2.succ;
 }
 }

 // –û—Ç—Å—Ç—Ä–∞–Ω–∏ –≥–æ –ø–æ–º–æ—à–Ω–∏–æ—Ç j–∞–∑–µ–ª
 node = node.succ;
 }

 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt();
 SLL<Integer> lista=new SLL<Integer>();

 for(int i=0;i<n;i++)
 {
 int el=sc.nextInt();
lista.insertLast(el);
 }

 lista.rearrange();


 System.out.println(lista.toString()); }



 –†–∞–∑–¥–µ–ª–∏ min-max –ª–∏—Å—Ç–∞
–î–∞–¥–µ–Ω–∞ –µ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ –ø–æ–≤—Ä–∑–∞–Ω–∞ –ª–∏—Å—Ç–∞ —á–∏–∏ —à—Ç–æ j–∞–∑–ª–∏ —Å–æ–¥—Ä–∂–∞—Ç –ø–æ –µ–¥–µ–Ω –ø—Ä–∏—Ä–æ–¥–µ–Ω
–±—Ä–æj. –í–æ –¥–∞–¥–µ–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –ø—Ä–æ–Ω–∞j–¥–∞—Ç –µ–ª–µ–º–µ–Ω—Ç–∏—Ç–µ —Å–æ –Ω–∞j–º–∞–ª–∞ –∏ –Ω–∞j–≥–æ–ª–µ–º–∞ –≤—Ä–µ–¥–Ω–æ—Å—Ç –∏ –ø–æ—Ç–æ–∞ –ª–∏—Å—Ç–∞—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –ø–æ–¥–µ–ª–∏ –Ω–∞ –¥–≤–µ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∏ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ
–ø–æ–≤—Ä–∑–∞–Ω–∏ –ª–∏—Å—Ç–∏, —Ç.—à. –≤–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ —Å–º–µ—Å—Ç–∞—Ç —Å–∏—Ç–µ j–∞–∑–ª–∏ –∫–æ–∏ —Å–æ–¥—Ä–∂–∞—Ç
–±—Ä–æ–µ–≤–∏ –ø–æ–±–ª–∏—Å–∫–∏ –¥–æ –Ω–∞j–º–∞–ª–∏–æ—Ç –µ–ª–µ–º–µ–Ω—Ç –æ—Ç–∫–æ–ª–∫—É –¥–æ –Ω–∞j–≥–æ–ª–µ–º–∏–æ—Ç –µ–ª–µ–º–µ–Ω—Ç, –∞ –≤–æ –≤—Ç–æ—Ä–∞—Ç–∞ —Å–∏—Ç–µ j–∞–∑–ª–∏ –∫–æ–∏ —Å–æ–¥—Ä–∂–∞—Ç –±—Ä–æ–µ–≤–∏ –ø–æ–±–ª–∏—Å–∫–∏ –¥–æ –Ω–∞j–≥–æ–ª–µ–º–∏–æ—Ç –µ–ª–µ–º–µ–Ω—Ç –æ—Ç–∫–æ–ª–∫—É
–¥–æ –Ω–∞j–º–∞–ª–∏–æ—Ç. –î–æ–∫–æ–ª–∫—É –µ–ª–µ–º–µ–Ω—Ç–æ—Ç –µ –Ω–∞ –∏—Å—Ç–æ —Ä–∞—Å—Ç–æj–∞–Ω–∏–µ –æ–¥ –Ω–∞j–º–∞–ª–∏–æ—Ç –∏ –Ω–∞j–≥–æ–ª–µ–º–∏–æ—Ç –µ–ª–µ–º–µ–Ω—Ç —Ç–æ–≥–∞—à —Å–µ —Å–º–µ—Å—Ç—É–≤–∞ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–æ–±–ª–∏—Å–∫–∏ –¥–æ –Ω–∞j–º–∞–ª–æ—Ç
–µ–ª–µ–º–µ–Ω—Ç. J–∞–∑–ª–∏—Ç–µ –≤–æ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∏—Ç–µ –ª–∏—Å—Ç–∏ —Å–µ –¥–æ–¥–∞–≤–∞–∞—Ç —Å–ø–æ—Ä–µ–¥ —Ä–µ–¥–æ—Å–ª–µ–¥–æ—Ç –ø–æ –∫–æj
—Å–µ –ø–æj–∞–≤—É–≤–∞–∞—Ç –≤–æ –¥–∞–¥–µ–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞. (–ü–æ–º–æ—à: –±—Ä–æj–æ—Ç 3 –µ –Ω–∞ —Ä–∞—Å—Ç–æj–∞–Ω–∏–µ 2 –æ–¥ –±—Ä–æj–æ—Ç
1 –∏ –Ω–∞ —Ä–∞—Å—Ç–æj–∞–Ω–∏–µ 4 –æ–¥ –±—Ä–æj–æ—Ç 7. –°–ª–µ–¥—É–≤–∞ –¥–µ–∫–∞ –±—Ä–æj–æ—Ç 3 –µ –ø–æ–±–ª–∏—Å–∫—É –¥–æ –±—Ä–æj–æ—Ç 1
–æ—Ç–∫–æ–ª–∫—É –¥–æ –±—Ä–æj–æ—Ç 7).
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ n. –í–æ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏–Ω–∏j–∞ —Å–µ
–¥–∞–≤–∞–∞—Ç –±—Ä–æ–µ–≤–∏—Ç–µ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ –æ–¥–¥–µ–ª–µ–Ω–∏ —Å–æ –ø—Ä–∞–∑–Ω–æ –º–µ—Å—Ç–æ.
–ò–∑–ª–µ–∑: –ù–∞ –∏–∑–ª–µ–∑ –≤–æ –ø—Ä–≤–∏–æ—Ç —Ä–µ–¥ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∞—Ç j–∞–∑–ª–∏—Ç–µ –ø–æ —Ä–µ–¥–æ—Å–ª–µ–¥ –Ω–∞
–ø—Ä–≤–∞—Ç–∞ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞ (–∫–æj–∞ —Å–æ–¥—Ä–∂–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–æ–∏ —Å–µ –ø–æ–±–ª–∏—Å–∫—É –¥–æ –Ω–∞j–º–∞–ª–∏–æ—Ç
–µ–ª–µ–º–µ–Ω—Ç). –í–æ –≤—Ç–æ—Ä–∏–æ—Ç —Ä–µ–¥ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∞—Ç j–∞–∑–ª–∏—Ç–µ –Ω–∞ –ø–æ —Ä–µ–¥–æ—Å–ª–µ–¥ –Ω–∞ –≤—Ç–æ—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞ (–∫–æj–∞ —Å–æ–¥—Ä–∂–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–æ–∏ —Å–µ –ø–æ–±–ª–∏—Å–∫—É –¥–æ –Ω–∞j–≥–æ–ª–µ–º–∏–æ—Ç
–µ–ª–µ–º–µ–Ω—Ç).
–ü—Ä–∏–º–µ—Ä.
–í–ª–µ–∑:
9
1 5 7 3 2 9 4 8 6
–ò–∑–ª–µ–∑:
1->5->3->2->4
7->9->8->6


import java.util.Scanner;

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }
}

class SLL<E> {
    private SLLNode<E> first;

    public SLL() {
        this.first = null;
    }

    public void insertLast(E o) {
        if (first != null) {
            SLLNode<E> tmp = first;
            while (tmp.succ != null)
                tmp = tmp.succ;
            tmp.succ = new SLLNode<E>(o, null);
        } else {
            insertFirst(o);
        }
    }

    public void insertFirst(E o) {
        SLLNode<E> ins = new SLLNode<E>(o, first);
        first = ins;
    }

    public SLLNode<E> getFirst() {
        return first;
    }

    @Override
    public String toString() {
        String ret = new String();
        if (first != null) {
            SLLNode<E> tmp = first;
            ret += tmp.element;
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret += "->" + tmp.element;
            }
        } else {
            ret = "Prazna lista!!!";
        }
        return ret;
    }
}


public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        SLL<Integer> list = new SLL<>();

        for (int i = 0; i < n; i++) {
            list.insertLast(sc.nextInt());
        }


        SLLNode<Integer> current = list.getFirst();

        int min=current.element;
        int max=current.element;

        while (current!= null) {
            if(current.element<min){
                min=current.element;
            }
            if(current.element>max){
                max=current.element;
            }
            current = current.succ;
        }
        SLL<Integer> closetoMin = new SLL<>();
        SLL<Integer> closetoMax = new SLL<>();

        current=list.getFirst();


        while (current!=null) {
            int distanaceMin=Math.abs(current.element-min);
            int distanaceMax=Math.abs(current.element-max);

            if(distanaceMin<=distanaceMax){
                closetoMin.insertLast(current.element);
            }
            else {
                closetoMax.insertFirst(current.element);
            }
            current = current.succ;
        }


        System.out.println(closetoMin);
        System.out.println(closetoMax);


    }
}

–ë—Ä–∏—à–∏ j–∞–∑–ª–∏ –æ–¥ –ª–∏—Å—Ç–∞
–î–∞–¥–µ–Ω–∞ –µ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∞ –ø–æ–≤—Ä–∑–∞–Ω–∞ –ª–∏—Å—Ç–∞ —Å–æ —Ü–µ–ª–∏ –±—Ä–æ–µ–≤–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –µ –¥–∞ –±—Ä–∏—à–µ—Ç–µ
j–∞–∑–ª–∏ —Ç.—à. –ø—Ä–≤–æ ¬¥–∫–µ –æ—Å—Ç–∞–≤–∏—Ç–µ –µ–¥–µ–Ω j–∞–∑–æ–ª, –µ–¥–µ–Ω ¬¥–∫–µ –±—Ä–∏—à–µ—Ç–µ, –ø–∞ ¬¥–∫–µ –æ—Å—Ç–∞–≤–∏—Ç–µ 2 j–∞–∑–ª–∏
–µ–¥–µ–Ω ¬¥–∫–µ –±—Ä–∏—à–µ—Ç–µ, –ø–∞ ¬¥–∫–µ –æ—Å—Ç–∞–≤–∏—Ç–µ 3 j–∞–∑–ª–∏ –ø–∞ –µ–¥–µ–Ω ¬¥–∫–µ –±—Ä–∏—à–µ—Ç–µ –∏—Ç–Ω... –û–¥–Ω–æ—Å–Ω–æ –æ–¥ –≤–∞—Å
49
–ü–æ–¥–∞—Ç–æ—á–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
—Å–µ –±–∞—Ä–∞ –¥–∞ –±—Ä–∏—à–µ—Ç–µ –ø—Ä–µ–∫—É 1, –ø–∞ –ø—Ä–µ–∫—É 2, –ø–∞ –ø—Ä–µ–∫—É 3 j–∞–∑–ª–∏ –∏—Ç–Ω... –¥–æ–¥–µ–∫–∞ –µ –≤–æ–∑–º–æ–∂–Ω–æ
–¥–∞ —Å–µ –±—Ä–∏—à–µ.
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ n. –í–æ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏–Ω–∏j–∞ —Å–µ
–¥–∞–≤–∞–∞—Ç –±—Ä–æ–µ–≤–∏—Ç–µ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ –æ–¥–¥–µ–ª–µ–Ω–∏ —Å–æ –ø—Ä–∞–∑–Ω–æ –º–µ—Å—Ç–æ.
–ò–∑–ª–µ–∑: –†–µ–∑—É–ª—Ç–∞—Ç–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞. –î–æ–∫–æ–ª–∫—É –ª–∏—Å—Ç–∞—Ç–∞ –µ –ø—Ä–∞–∑–Ω–∞ –∏—Å–ø–µ—á–∞—Ç–µ—Ç–µ: Prazna
lista
–ü—Ä–∏–º–µ—Ä.
–í–ª–µ–∑:
9
4 6 8 3 1 3 5 7 2
–ò–∑–ª–µ–∑:
4->8->3->3->5->7

import java.util.Scanner;

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }
}

class SLL<E> {
    private SLLNode<E> first;

    public SLL() {
        // Construct an empty SLL
        this.first = null;
    }

    public void deleteList() {
        first = null;
    }

    public int size() {
        int listSize = 0;
        SLLNode<E> tmp = first;
        while(tmp != null) {
            listSize++;
            tmp = tmp.succ;
        }
        return listSize;
    }

    @Override
    public String toString() {
        String ret = new String();
        if (first != null) {
            SLLNode<E> tmp = first;
            ret += tmp.element;
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret += "->" + tmp.element;
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }

    public void insertFirst(E o) {
        SLLNode<E> ins = new SLLNode<E>(o, null);
        ins.succ = first;
        //SLLNode<E> ins = new SLLNode<E>(o, first);
        first = ins;
    }

    public void insertAfter(E o, SLLNode<E> node) {
        if (node != null) {
            SLLNode<E> ins = new SLLNode<E>(o, node.succ);
            node.succ = ins;
        } else {
            System.out.println("Dadenot jazol e null");
        }
    }
    public void insertBefore(E o, SLLNode<E> before) {

        if (first != null) {
            SLLNode<E> tmp = first;
            if(first==before){
                this.insertFirst(o);
                return;
            }
            //ako first!=before
            while (tmp.succ != before && tmp.succ!=null)
                tmp = tmp.succ;
            if (tmp.succ == before) {
                tmp.succ = new SLLNode<E>(o, before);;
            } else {
                System.out.println("Elementot ne postoi vo listata");
            }
        } else {
            System.out.println("Listata e prazna");
        }
    }

    public void insertLast(E o) {
        if (first != null) {
            SLLNode<E> tmp = first;
            while (tmp.succ != null)
                tmp = tmp.succ;
            tmp.succ = new SLLNode<E>(o, null);
        } else {
            insertFirst(o);
        }
    }

    public E deleteFirst() {
        if (first != null) {
            SLLNode<E> tmp = first;
            first = first.succ;
            return tmp.element;
        } else {
            System.out.println("Listata e prazna");
            return null;
        }
    }

    public E delete(SLLNode<E> node) {
        if (first != null) {
            SLLNode<E> tmp = first;
            if(first == node) {
                return this.deleteFirst();
            }
            while (tmp.succ != node && tmp.succ.succ != null)
                tmp = tmp.succ;
            if (tmp.succ == node) {
                tmp.succ = tmp.succ.succ;
                return node.element;
            } else {
                System.out.println("Elementot ne postoi vo listata");
                return null;
            }
        } else {
            System.out.println("Listata e prazna");
            return null;
        }

    }

    public SLLNode<E> getFirst() {
        return first;
    }

    public SLLNode<E> find(E o) {
        if (first != null) {
            SLLNode<E> tmp = first;
            while (!tmp.element.equals(o) && tmp.succ != null)
                tmp = tmp.succ;
            if (tmp.element.equals(o)) {
                return tmp;
            } else {
                System.out.println("Elementot ne postoi vo listata");
            }
        } else {
            System.out.println("Listata e prazna");
        }
        return null;
    }

    public void merge (SLL<E> in){
        if (first != null) {
            SLLNode<E> tmp = first;
            while(tmp.succ != null)
                tmp = tmp.succ;
            tmp.succ = in.getFirst();
        }
        else{
            first = in.getFirst();
        }
    }

    public void deleteNode(SLLNode<E> prev, SLLNode<E> toDelete) {
        if (toDelete == first) {
            first = first.succ;
        } else {
            prev.succ = toDelete.succ;
        }
    }


    public void mirror() {
        if (first != null) {
            //m=nextsucc, p=tmp,q=next
            SLLNode<E> tmp = first;
            SLLNode<E> newsucc = null;
            SLLNode<E> next;

            while(tmp != null){
                next = tmp.succ;
                tmp.succ = newsucc;
                newsucc = tmp;
                tmp = next;
            }
            first = newsucc;
        }
    }
}


public class Main {
    public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt();
       SLL<Integer> list = new SLL<>();

       for (int i = 0; i < n; i++) {
           list.insertLast(sc.nextInt());
       }


       SLLNode<Integer> current = list.getFirst();
       SLLNode<Integer> prev = null;
       int count = 0;
       int keep=1;

       while (current != null) {
           count++;
           if(count == keep) {
               count=0;
               keep++;
               if(current.succ != null) {
                   list.deleteNode(current,current.succ);
               }
           }
           prev = current;
           current = current.succ;
       }

    System.out.println(list);
    }
}



–ù–∞–∏–∑–º–µ–Ω–∏—á–Ω–æ —Å–ø–æ–∏ –ª–∏—Å—Ç–∏
–î–∞–¥–µ–Ω–∏ —Å–µ –¥–≤–µ –µ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–æ –ø–æ–≤—Ä–∑–∞–Ω–∏ –ª–∏—Å—Ç–∏ —á–∏–∏ —à—Ç–æ j–∞–∑–ª–∏ —Å–æ–¥—Ä–∂–∞—Ç –ø–æ –µ–¥–µ–Ω –ø—Ä–∏—Ä–æ–¥–µ–Ω –±—Ä–æj. –¢—Ä–µ–±–∞ –¥–∞ —Å–µ —Å–ø–æj–∞—Ç –¥–≤–µ—Ç–µ –ª–∏—Å—Ç–∏ –≤–æ –µ–¥–Ω–∞ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞ –Ω–∞ —Ç–æj –Ω–∞—á–∏–Ω —à—Ç–æ
–Ω–∞–∏–∑–º–µ–Ω–∏—á–Ω–æ –ø—Ä–≤–æ ¬¥–∫–µ —Å–µ –¥–æ–¥–∞–≤–∞–∞—Ç –ø—Ä–≤–∏—Ç–µ –¥–≤–∞ j–∞–∑–ª–∏ –æ–¥ –ø—Ä–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞ –≤–æ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞, –ø–∞ –ø—Ä–≤–∏—Ç–µ –¥–≤–∞ –æ–¥ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏—Å—Ç–∞, –ø–∞ —Å–ª–µ–¥–Ω–∏—Ç–µ –¥–≤–∞ –æ–¥ –ø—Ä–≤–∞—Ç–∞, –ø–∞ —Å–ª–µ–¥–Ω–∏—Ç–µ –¥–≤–∞
–æ–¥ –≤—Ç–æ—Ä–∞—Ç–∞ –∏—Ç–Ω. J–∞–∑–ª–∏—Ç–µ —à—Ç–æ ¬¥–∫–µ –æ—Å—Ç–∞–Ω–∞—Ç —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –¥–æ–¥–∞–¥–∞—Ç –Ω–∞ –∫—Ä–∞j –≤–æ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞ –ª–∏—Å—Ç–∞, –ø—Ä–≤–æ –æ–Ω–∏–µ —à—Ç–æ –æ—Å—Ç–∞–Ω–∞–ª–µ –æ–¥ –ø—Ä–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞, –ø–æ—Ç–æ–∞ –æ–Ω–∏–µ —à—Ç–æ –æ—Å—Ç–∞–Ω–∞–ª–µ
–æ–¥ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏—Å—Ç–∞.
–í–ª–µ–∑: –í–æ –ø—Ä–≤–∞—Ç–∞ –ª–∏–Ω–∏j–∞ –µ –¥–∞–¥–µ–Ω –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –ø—Ä–≤–∞—Ç–∞ –ª–∏—Å—Ç–∞, –ø–∞ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏–Ω–∏j–∞ —Å–µ –¥–∞–≤–∞–∞—Ç –±—Ä–æ–µ–≤–∏—Ç–µ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ –æ–¥–¥–µ–ª–µ–Ω–∏ —Å–æ –ø—Ä–∞–∑–Ω–æ –º–µ—Å—Ç–æ.–í–æ —Ç—Ä–µ—Ç–∞—Ç–∞
–ª–∏–Ω–∏j–∞ –±—Ä–æj–æ—Ç –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –≤—Ç–æ—Ä–∞—Ç–∞ –ª–∏—Å—Ç–∞, –ø–∞ —á–µ—Ç–≤—Ä—Ç–∞—Ç–∞ –ª–∏–Ω–∏j–∞ —Å–µ –¥–∞–≤–∞–∞—Ç –±—Ä–æ–µ–≤–∏—Ç–µ –≤–æ –ª–∏—Å—Ç–∞—Ç–∞ –æ–¥–¥–µ–ª–µ–Ω–∏ —Å–æ –ø—Ä–∞–∑–Ω–æ –º–µ—Å—Ç–æ.
–ò–∑–ª–µ–∑: –ù–∞ –∏–∑–ª–µ–∑ —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –∏—Å–ø–µ—á–∞—Ç–∞—Ç j–∞–∑–ª–∏—Ç–µ –ø–æ —Ä–µ–¥–æ—Å–ª–µ–¥ –≤–æ —Ä–µ–∑—É–ª—Ç–∞–Ω—Ç–Ω–∞—Ç–∞
—Å–ø–æ–µ–Ω–∞ –ª–∏—Å—Ç–∞.
–ü—Ä–∏–º–µ—Ä.
–í–ª–µ–∑:
5
5 7 9
8
1 1 4 5 6 8 9 4
–ò–∑–ª–µ–∑:
5->7->1->1->9->4->5->6->8->9->4







